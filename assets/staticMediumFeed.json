{"title":"Stories by Spencer Attick on Medium","description":"Stories by Spencer Attick on Medium","link":"https://medium.com/@spencer.attick?source=rss-e5dc359f27c2------2","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*_8WJXYOSojpzAxZ8hddk4g.jpeg","category":[],"items":[{"id":"https://medium.com/p/0793f2ee2f7e","title":"Project: Learning Python by Coding Simple TicTacToe Game","link":"https://medium.com/@spencer.attick/project-learning-python-by-coding-simple-tictactoe-game-0793f2ee2f7e?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1710348622000,"created":1710348622000,"category":["software-development","study","coding","javascript","python"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ePggMN4fqMbGFIc-awASDQ.png\" /></figure><p>As a trained JavaScript developer working for years in the language, I’d been wanting to branch out into the functional possibilities of other languages. I took Codecademy’s Computer Science path which is taught in Python and was eager to step into a new challenge. As a part of my learning, I built a simple command line Tic Tac Toe game to solidify some Python syntax and concepts.</p><h3>The Problem</h3><p>To this point, I’ve gained extensive knowledge and time spent working with JavaScript and was ready to up my skill game by learning Python.</p><h3>The Work</h3><p>Codecademy’s Computer Science track offers a great intro to Python at the start of the course. I learned through their project sets to come to a working knowledge of the Python language.</p><p>The code base for this project consists of just two files: one containing a Board class that holds the methods and variables needed to run the game and the other is a brief file for executing the logic of the program.</p><h3>The Code</h3><p>You can find the code here: <a href=\"https://github.com/spencerattick/tic_tac_toe\">https://github.com/spencerattick/tic_tac_toe</a>.</p><h3>What I Learned</h3><p>This project was a great experience! I had actually worked on something similar in JavaScript but through a bit of up front planning, managed to code this Python version much more succinctly. This work gave me a great opporunity to code outside of Codecademy’s guardrails to stand something up on my own. It was a wonderful way to solidify and further practice the new Python syntax I had learned.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=0793f2ee2f7e\" width=\"1\" height=\"1\" alt=\"\">","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ePggMN4fqMbGFIc-awASDQ.png\" /></figure><p>As a trained JavaScript developer working for years in the language, I’d been wanting to branch out into the functional possibilities of other languages. I took Codecademy’s Computer Science path which is taught in Python and was eager to step into a new challenge. As a part of my learning, I built a simple command line Tic Tac Toe game to solidify some Python syntax and concepts.</p><h3>The Problem</h3><p>To this point, I’ve gained extensive knowledge and time spent working with JavaScript and was ready to up my skill game by learning Python.</p><h3>The Work</h3><p>Codecademy’s Computer Science track offers a great intro to Python at the start of the course. I learned through their project sets to come to a working knowledge of the Python language.</p><p>The code base for this project consists of just two files: one containing a Board class that holds the methods and variables needed to run the game and the other is a brief file for executing the logic of the program.</p><h3>The Code</h3><p>You can find the code here: <a href=\"https://github.com/spencerattick/tic_tac_toe\">https://github.com/spencerattick/tic_tac_toe</a>.</p><h3>What I Learned</h3><p>This project was a great experience! I had actually worked on something similar in JavaScript but through a bit of up front planning, managed to code this Python version much more succinctly. This work gave me a great opporunity to code outside of Codecademy’s guardrails to stand something up on my own. It was a wonderful way to solidify and further practice the new Python syntax I had learned.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=0793f2ee2f7e\" width=\"1\" height=\"1\" alt=\"\">","media":{}},{"id":"https://medium.com/p/40244b17df2c","title":"Integrating with the Strava API","link":"https://levelup.gitconnected.com/integrating-with-the-strava-api-40244b17df2c?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1682603854000,"created":1682603854000,"category":["javascript","code","strava","technology","api"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*Mt34G_EiJGABwI2i\" /><figcaption><a href=\"https://unsplash.com/@asoggetti\">Alessio Soggetti</a> for <a href=\"https://unsplash.com/photos/JQGGf6OuIdQ\">Unsplash</a></figcaption></figure><p>As I was coding my personal website I was looking for ways that I could personalize the project. I didn’t want it to just be a place to house blog posts and project walkthroughs. I wanted to share a bit of myself there as well.</p><p>With that in mind, I integrated the Goodreads RSS feed as books are one of my passions. While I was working on my portfolio I was also training for my first half-marathon and doing a TON of running that I was recording on <a href=\"https://www.strava.com/\">Strava</a>. I thought to myself, why not add that data onto my website as well?</p><p>I saw that they have an API that uses OAuth2, with which I didn’t have much experience. After a bit of trial and error along with a variety of internet resources I was able to get things up and running.</p><p>To save you some time, I thought I’d write a simple guide to the process. Strava does provide information here but I’ll pare things down for you even more step by step. <a href=\"https://developers.strava.com/docs/authentication/#introduction\">Here is Strava’s documentation</a> if you’d like the full rundown.</p><p>Let’s get started!</p><p>1. <strong>Get App Credentials from Strava<br></strong>The first step you’ll need to take is to head over to Strava to register an app (it’s way easier than it sounds) and then get your access keys. The URL to do this can be hard to find so here it is for your reference: <a href=\"https://www.strava.com/settings/api\">https://www.strava.com/settings/api</a>.</p><p>Once you’re there, you’ll need to fill out a few fields in order to be provided with your credentials. The fields filled out here are not incredibly important.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iDk-P9S934CNkhn0Cs2D_Q.png\" /><figcaption>Image from <a href=\"https://developers.strava.com/docs/getting-started/#account\">Strava’s documentation</a></figcaption></figure><p>The field that tripped me up here was the Authorization Callback Domain. This is only used once for the next step so you can set it to localhost to get things working. You don’t need to have a localhost running or take any additional steps to get the Authorization Callback Domain to work, just fill in that form with localhostas the Authorization Callback Domain and that’s it.</p><p>2. <strong>Authorize Credentials in the Browser<br></strong>This step only happens once and it involves visiting a specific URL in the browser so that you can authorize the use of the credentials Strava gave you in the previous step.</p><p>My goal in using the API was to use the <a href=\"https://developers.strava.com/docs/reference/#api-Activities-getLoggedInAthleteActivities\">List Athlete Activities</a> endpoint which requires read_all access. You’ll need to do this step for any level of access you’d like, but the following URL will be for read_all access specifically.</p><p>What you’ll want to do here is paste this URL into your browser: // <a href=\"http://localhost/exchange_token?state=&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&scope=read,activity:read_all\">http://localhost/exchange_token?state=&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&scope=read,activity:read_all</a>. Go ahead and provide the URL with the client_id from the your Strava account.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y9CVXKj25Yn0VNXDbKdH6Q.png\" /></figure><p>3. <strong>Get Strava Access Code</strong><br>Awesome! When you visit the above URL you’ll be prompted to on the website to authorize your project with Strava:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eCZ2d-M-4XyymB2iMxTv6Q.png\" /></figure><p>Once you click Authorize, you’ll be redirected to a new URL that looks like this:<a href=\"http://localhost/exchange_token?state=&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&scope=read,activity:read_all\">http://localhost/exchange_token?state=&code=1c49xxxxxxxxxxxxxxxxxxxxxxx&scope=read,activity:read_all</a>.</p><p>You won’t see anything render on that page and that’s just fine. All you need there is the new URL.</p><p>I’ve redacted some the code value I received there as a query parameter but that is the field you’ll want to hold on to for the next step.</p><p>4. <strong>Get Strava Access and Refresh Tokens</strong><br>After you’ve collected the code value, you’ll want to make an API request (you can use <a href=\"https://www.postman.com/\">Postman</a>, cURL, or any other API request tool or server to do this) to get the actual access token information.</p><p>The request will be a POST to this endpoint:</p><p><a href=\"https://www.strava.com/oauth/token?client_id=105494&client_secret=aeca4b4832d195c467d23e1c465781eed04be76b&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&grant_type=authorization_code'\">https://www.strava.com/oauth/token</a></p><p>You’ll want to provide the following as query parameters:</p><p>client_id: you can get this from your Strava account<br>client_secret: you can get this from your Strava account <br>code: you should have received this in the last step from the URL<br>grant_type: set this to authorization_code</p><p>The complete URL will look like this (I’ve redacted my own values):</p><p><a href=\"https://www.strava.com/oauth/token?client_id=105494&client_secret=aeca4b4832d195c467d23e1c465781eed04be76b&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&grant_type=authorization_code'\">https://www.strava.com/oauth/token?client_id=xxxxxxx&client_secret=xxxxxxxxxxxxxxxxxxxxxx&code=</a><a href=\"http://localhost/exchange_token?state=&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&scope=read,activity:read_all\">1c49xxxxxxxxxxxxxxxxxxxxxxx</a><a href=\"https://www.strava.com/oauth/token?client_id=105494&client_secret=aeca4b4832d195c467d23e1c465781eed04be76b&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&grant_type=authorization_code'\">&grant_type=authorization_code</a></p><p>If you’re using Postman, here is what the interface should look like:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*n-cF05JKBVqJjAXKX6vyKQ.png\" /></figure><p>Making that request will result in a response that looks like this:</p><pre>{<br>    \"token_type\": \"Bearer\",<br>    \"expires_at\": 1681350948,<br>    \"expires_in\": 21600,<br>    \"refresh_token\": \"25bdxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",<br>    \"access_token\": \"87b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",<br>    \"athlete\": {<br>        \"id\": xxxxxx,<br>        \"username\": \"xxxxxxx\",<br>        \"resource_state\": 2,<br>        \"firstname\": \"Spencer\",<br>        \"lastname\": \"Attick\",<br>        \"bio\": null,<br>        \"city\": \"Oakland\",<br>        \"state\": \"California\",<br>        \"country\": \"United States\",<br>        \"sex\": null,<br>        \"premium\": false,<br>        \"summit\": false,<br>        \"created_at\": \"2015-04-01T00:46:54Z\",<br>        \"updated_at\": \"2023-04-11T18:24:23Z\",<br>        \"badge_type_id\": 0,<br>        \"weight\": 0.0,<br>        \"profile_medium\": \"https://graph.facebook.com/1226490129/picture?height=256&width=256\",<br>        \"profile\": \"https://graph.facebook.com/1226490129/picture?height=256&width=256\",<br>        \"friend\": null,<br>        \"follower\": null<br>    }<br>}</pre><p>The important fields to pay attention to here are expires_at, refresh_token, and access_token.</p><p>Strava’s access_token will expire at the expires_at time which is a Unix Epoch timestamp. We’ll talk about refreshing later, but for now let’s get some Strava data.</p><p>5. <strong>Get Workout Data from Strava</strong><br>Alright! We can finally make a request to get the data we want from Strava!</p><p>Here you’ll want to make a GET request that looks like this:</p><pre>curl --location 'https://www.strava.com/api/v3/athlete/activities' \\<br> --header 'Authorization: Bearer <ACCESS_TOKEN>'</pre><p>You’ll use the access_token you received above as the Bearer Token here. Ensure that you don’t have a request body at all for this step as that will throw an error.</p><p>Check out the response to that request. You’ve got Strava data you can work with! You can add this to your personal website, create a workout dashboard for yourself, create a leaderboard with friends, or whatever else you can think of!</p><p>7. <strong>Manage Refreshing the Access Token</strong><br>The last thing we want to take care of is making sure you can refresh your token when it expires. To do this, you’ll want to keep track of the last expires_at field you received. When the current time is greater than the value of the expires_at value, it’s time for a new access_token.</p><p>You’ll make this POST request to get a new token:</p><pre>curl --location --request POST 'https://www.strava.com/oauth/token</pre><p>Here are the query params you’ll use and their values:</p><p>client_id: you can get this from your Strava account<br>client_secret: you can get this from your Strava account <br>code: you should have received this in the last step from the URL<br>grant_type: set this to refresh_token<br>refresh_token: the refresh_token from your last successful authentication request</p><p>Here is the full request with the query params in place:</p><pre>?client_id=xxxxxxx&client_secret=xxxxxxxxxxxxxxxxxxxxxx&grant_type=refresh_token&refresh_token=25bd1cf38exxxxxxxxxxxxxxxxxxxxx'</pre><p>The response will look like this:</p><pre>{<br>    \"token_type\": \"Bearer\",<br>    \"access_token\": \"6e6e9xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",<br>    \"expires_at\": 1681430228,<br>    \"expires_in\": 21600,<br>    \"refresh_token\": \"25bdxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"<br>}</pre><p>Now you’re all set! You can make requests to Strava to get meaningful data on your activities and you can generate a new access token!</p><p>From here, you’ll want to put everything together into something you can use in your server. Here is the code I use for Strava integration that I wrote for my personal website:</p><pre>const isStravaTokenExpired = (currentExpirationTime) => {<br>  const currentEpochTime = Date.now();<br>  if (currentExpirationTime === 'undefined') {<br>      return `There is an error with the currentEpirationTime, it's value is: ${currentExpirationTime}.`<br>  }<br>  return currentEpochTime > currentExpirationTime;<br>}<br><br>const generateNewToken = async () => {<br>  console.log('Generating new token...');<br>  const requestOptions = {<br>      method: 'POST',<br>      redirect: 'follow'<br>    };<br>  const requestURL = `https://www.strava.com/oauth/token?client_id=${process.env.STRAVA_CLIENT_ID}&client_secret=${process.env.STRAVA_CLIENT_SECRET}&grant_type=refresh_token&refresh_token=ReplaceWithRefreshToken&refresh_token=${process.env.STRAVA_CACHED_REFRESH_TOKEN}`;<br><br>  try {<br>      let response = await fetch(requestURL, requestOptions);<br>      response = await response.json(); <br>      if (response.message === 'Bad Request') {<br>        console.log(response);<br>          return;<br>      }<br>      return {<br>          refreshToken: await response.refresh_token, <br>          expirationTime: await response.expires_at,<br>          accessToken: await response.access_token<br>      }<br>  } catch (error) {<br>      console.log(error);<br>  }<br><br>}<br><br><br><br>const persistNewTokenData = async (newTokenData) => {<br>  // Read the .env file<br>  const envBuffer = fs.readFileSync('.env');<br>  const envConfig = dotenv.parse(envBuffer);<br><br>  // Update the relevant key with the new value<br>  envConfig['STRAVA_EXPIRATION_TIME'] = newTokenData.expirationTime,<br>  envConfig['STRAVA_CACHED_REFRESH_TOKEN'] = newTokenData.refreshToken,<br>  envConfig['STRAVA_CACHED_TOKEN'] = newTokenData.accessToken<br><br>  // Write the updated key-value pair to the file<br>  const envText = Object.keys(envConfig).map(key => `${key}=${envConfig[key]}`).join('\\n');<br>  await fs.promises.writeFile('.env', envText);<br>};<br><br><br><br>const getStravaActivityData = async () => {<br>  console.log('Requesting activity data from Strava...');<br>  let myHeaders = new Headers();<br>  myHeaders.append(\"Authorization\", `Bearer ${process.env.STRAVA_CACHED_TOKEN}`);<br><br>  const requestOptions = {<br>    method: 'GET',<br>    headers: myHeaders,<br>    redirect: 'follow'<br>  };<br><br>  try {<br>      const response = await fetch(\"https://www.strava.com/api/v3/athlete/activities\", requestOptions);<br>      return response.json();<br><br>  } catch (error) {<br>      console.log('error', error)<br>  }   <br>}<br><br>//check to see if the expiration time has passed<br>const executeStravaLogic = async () => {<br>  const isTokenExpired = isStravaTokenExpired(process.env.STRAVA_EXPIRATION_TIME);<br><br>  if (typeof isTokenExpired === 'string') {<br>      console.log('Please resolve the error with the current expiration time stored in the .env file.');<br>      return;<br>  } else if (isTokenExpired) {<br>      console.log('The expiration time has passed. Generating a new token...');<br>      //if yes - generate a new token<br>      const newTokenData = await generateNewToken();<br>      if (!newTokenData.expirationTime) {<br>          console.log('There was an error getting refresh token data.')<br>          return;<br>      } <br>      //save the new token info to .env<br>      persistNewTokenData(newTokenData);<br><br>  } <br>  //make request to Strava activities endpoint<br>  const stravaActivityData = await getStravaActivityData();<br>  return stravaActivityData;<br>};<br><br>app.get('/api/strava', executeStravaLogic);</pre><p>Feel free to use what works for you and scrap what doesn’t.</p><p>Enjoy!</p><h3>Level Up Coding</h3><p>Thanks for being a part of our community! Before you go:</p><ul><li>👏 Clap for the story and follow the author 👉</li><li>📰 View more content in the <a href=\"https://levelup.gitconnected.com/?utm_source=pub&utm_medium=post\">Level Up Coding publication</a></li><li>💰 Free coding interview course ⇒ <a href=\"https://skilled.dev/?utm_source=luc&utm_medium=article\">View Course</a></li><li>🔔 Follow us: <a href=\"https://twitter.com/gitconnected\">Twitter</a> | <a href=\"https://www.linkedin.com/company/gitconnected\">LinkedIn</a> | <a href=\"https://newsletter.levelup.dev\">Newsletter</a></li></ul><p>🚀👉 <a href=\"https://jobs.levelup.dev/talent/welcome?referral=true\"><strong>Join the Level Up talent collective and find an amazing job</strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=40244b17df2c\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://levelup.gitconnected.com/integrating-with-the-strava-api-40244b17df2c\">Integrating with the Strava API</a> was originally published in <a href=\"https://levelup.gitconnected.com\">Level Up Coding</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*Mt34G_EiJGABwI2i\" /><figcaption><a href=\"https://unsplash.com/@asoggetti\">Alessio Soggetti</a> for <a href=\"https://unsplash.com/photos/JQGGf6OuIdQ\">Unsplash</a></figcaption></figure><p>As I was coding my personal website I was looking for ways that I could personalize the project. I didn’t want it to just be a place to house blog posts and project walkthroughs. I wanted to share a bit of myself there as well.</p><p>With that in mind, I integrated the Goodreads RSS feed as books are one of my passions. While I was working on my portfolio I was also training for my first half-marathon and doing a TON of running that I was recording on <a href=\"https://www.strava.com/\">Strava</a>. I thought to myself, why not add that data onto my website as well?</p><p>I saw that they have an API that uses OAuth2, with which I didn’t have much experience. After a bit of trial and error along with a variety of internet resources I was able to get things up and running.</p><p>To save you some time, I thought I’d write a simple guide to the process. Strava does provide information here but I’ll pare things down for you even more step by step. <a href=\"https://developers.strava.com/docs/authentication/#introduction\">Here is Strava’s documentation</a> if you’d like the full rundown.</p><p>Let’s get started!</p><p>1. <strong>Get App Credentials from Strava<br></strong>The first step you’ll need to take is to head over to Strava to register an app (it’s way easier than it sounds) and then get your access keys. The URL to do this can be hard to find so here it is for your reference: <a href=\"https://www.strava.com/settings/api\">https://www.strava.com/settings/api</a>.</p><p>Once you’re there, you’ll need to fill out a few fields in order to be provided with your credentials. The fields filled out here are not incredibly important.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iDk-P9S934CNkhn0Cs2D_Q.png\" /><figcaption>Image from <a href=\"https://developers.strava.com/docs/getting-started/#account\">Strava’s documentation</a></figcaption></figure><p>The field that tripped me up here was the Authorization Callback Domain. This is only used once for the next step so you can set it to localhost to get things working. You don’t need to have a localhost running or take any additional steps to get the Authorization Callback Domain to work, just fill in that form with localhostas the Authorization Callback Domain and that’s it.</p><p>2. <strong>Authorize Credentials in the Browser<br></strong>This step only happens once and it involves visiting a specific URL in the browser so that you can authorize the use of the credentials Strava gave you in the previous step.</p><p>My goal in using the API was to use the <a href=\"https://developers.strava.com/docs/reference/#api-Activities-getLoggedInAthleteActivities\">List Athlete Activities</a> endpoint which requires read_all access. You’ll need to do this step for any level of access you’d like, but the following URL will be for read_all access specifically.</p><p>What you’ll want to do here is paste this URL into your browser: // <a href=\"http://localhost/exchange_token?state=&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&scope=read,activity:read_all\">http://localhost/exchange_token?state=&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&scope=read,activity:read_all</a>. Go ahead and provide the URL with the client_id from the your Strava account.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y9CVXKj25Yn0VNXDbKdH6Q.png\" /></figure><p>3. <strong>Get Strava Access Code</strong><br>Awesome! When you visit the above URL you’ll be prompted to on the website to authorize your project with Strava:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eCZ2d-M-4XyymB2iMxTv6Q.png\" /></figure><p>Once you click Authorize, you’ll be redirected to a new URL that looks like this:<a href=\"http://localhost/exchange_token?state=&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&scope=read,activity:read_all\">http://localhost/exchange_token?state=&code=1c49xxxxxxxxxxxxxxxxxxxxxxx&scope=read,activity:read_all</a>.</p><p>You won’t see anything render on that page and that’s just fine. All you need there is the new URL.</p><p>I’ve redacted some the code value I received there as a query parameter but that is the field you’ll want to hold on to for the next step.</p><p>4. <strong>Get Strava Access and Refresh Tokens</strong><br>After you’ve collected the code value, you’ll want to make an API request (you can use <a href=\"https://www.postman.com/\">Postman</a>, cURL, or any other API request tool or server to do this) to get the actual access token information.</p><p>The request will be a POST to this endpoint:</p><p><a href=\"https://www.strava.com/oauth/token?client_id=105494&client_secret=aeca4b4832d195c467d23e1c465781eed04be76b&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&grant_type=authorization_code'\">https://www.strava.com/oauth/token</a></p><p>You’ll want to provide the following as query parameters:</p><p>client_id: you can get this from your Strava account<br>client_secret: you can get this from your Strava account <br>code: you should have received this in the last step from the URL<br>grant_type: set this to authorization_code</p><p>The complete URL will look like this (I’ve redacted my own values):</p><p><a href=\"https://www.strava.com/oauth/token?client_id=105494&client_secret=aeca4b4832d195c467d23e1c465781eed04be76b&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&grant_type=authorization_code'\">https://www.strava.com/oauth/token?client_id=xxxxxxx&client_secret=xxxxxxxxxxxxxxxxxxxxxx&code=</a><a href=\"http://localhost/exchange_token?state=&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&scope=read,activity:read_all\">1c49xxxxxxxxxxxxxxxxxxxxxxx</a><a href=\"https://www.strava.com/oauth/token?client_id=105494&client_secret=aeca4b4832d195c467d23e1c465781eed04be76b&code=1c49f418910a609b0097ae5ce0016c9b8141e8cd&grant_type=authorization_code'\">&grant_type=authorization_code</a></p><p>If you’re using Postman, here is what the interface should look like:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*n-cF05JKBVqJjAXKX6vyKQ.png\" /></figure><p>Making that request will result in a response that looks like this:</p><pre>{<br>    \"token_type\": \"Bearer\",<br>    \"expires_at\": 1681350948,<br>    \"expires_in\": 21600,<br>    \"refresh_token\": \"25bdxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",<br>    \"access_token\": \"87b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",<br>    \"athlete\": {<br>        \"id\": xxxxxx,<br>        \"username\": \"xxxxxxx\",<br>        \"resource_state\": 2,<br>        \"firstname\": \"Spencer\",<br>        \"lastname\": \"Attick\",<br>        \"bio\": null,<br>        \"city\": \"Oakland\",<br>        \"state\": \"California\",<br>        \"country\": \"United States\",<br>        \"sex\": null,<br>        \"premium\": false,<br>        \"summit\": false,<br>        \"created_at\": \"2015-04-01T00:46:54Z\",<br>        \"updated_at\": \"2023-04-11T18:24:23Z\",<br>        \"badge_type_id\": 0,<br>        \"weight\": 0.0,<br>        \"profile_medium\": \"https://graph.facebook.com/1226490129/picture?height=256&width=256\",<br>        \"profile\": \"https://graph.facebook.com/1226490129/picture?height=256&width=256\",<br>        \"friend\": null,<br>        \"follower\": null<br>    }<br>}</pre><p>The important fields to pay attention to here are expires_at, refresh_token, and access_token.</p><p>Strava’s access_token will expire at the expires_at time which is a Unix Epoch timestamp. We’ll talk about refreshing later, but for now let’s get some Strava data.</p><p>5. <strong>Get Workout Data from Strava</strong><br>Alright! We can finally make a request to get the data we want from Strava!</p><p>Here you’ll want to make a GET request that looks like this:</p><pre>curl --location 'https://www.strava.com/api/v3/athlete/activities' \\<br> --header 'Authorization: Bearer <ACCESS_TOKEN>'</pre><p>You’ll use the access_token you received above as the Bearer Token here. Ensure that you don’t have a request body at all for this step as that will throw an error.</p><p>Check out the response to that request. You’ve got Strava data you can work with! You can add this to your personal website, create a workout dashboard for yourself, create a leaderboard with friends, or whatever else you can think of!</p><p>7. <strong>Manage Refreshing the Access Token</strong><br>The last thing we want to take care of is making sure you can refresh your token when it expires. To do this, you’ll want to keep track of the last expires_at field you received. When the current time is greater than the value of the expires_at value, it’s time for a new access_token.</p><p>You’ll make this POST request to get a new token:</p><pre>curl --location --request POST 'https://www.strava.com/oauth/token</pre><p>Here are the query params you’ll use and their values:</p><p>client_id: you can get this from your Strava account<br>client_secret: you can get this from your Strava account <br>code: you should have received this in the last step from the URL<br>grant_type: set this to refresh_token<br>refresh_token: the refresh_token from your last successful authentication request</p><p>Here is the full request with the query params in place:</p><pre>?client_id=xxxxxxx&client_secret=xxxxxxxxxxxxxxxxxxxxxx&grant_type=refresh_token&refresh_token=25bd1cf38exxxxxxxxxxxxxxxxxxxxx'</pre><p>The response will look like this:</p><pre>{<br>    \"token_type\": \"Bearer\",<br>    \"access_token\": \"6e6e9xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",<br>    \"expires_at\": 1681430228,<br>    \"expires_in\": 21600,<br>    \"refresh_token\": \"25bdxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"<br>}</pre><p>Now you’re all set! You can make requests to Strava to get meaningful data on your activities and you can generate a new access token!</p><p>From here, you’ll want to put everything together into something you can use in your server. Here is the code I use for Strava integration that I wrote for my personal website:</p><pre>const isStravaTokenExpired = (currentExpirationTime) => {<br>  const currentEpochTime = Date.now();<br>  if (currentExpirationTime === 'undefined') {<br>      return `There is an error with the currentEpirationTime, it's value is: ${currentExpirationTime}.`<br>  }<br>  return currentEpochTime > currentExpirationTime;<br>}<br><br>const generateNewToken = async () => {<br>  console.log('Generating new token...');<br>  const requestOptions = {<br>      method: 'POST',<br>      redirect: 'follow'<br>    };<br>  const requestURL = `https://www.strava.com/oauth/token?client_id=${process.env.STRAVA_CLIENT_ID}&client_secret=${process.env.STRAVA_CLIENT_SECRET}&grant_type=refresh_token&refresh_token=ReplaceWithRefreshToken&refresh_token=${process.env.STRAVA_CACHED_REFRESH_TOKEN}`;<br><br>  try {<br>      let response = await fetch(requestURL, requestOptions);<br>      response = await response.json(); <br>      if (response.message === 'Bad Request') {<br>        console.log(response);<br>          return;<br>      }<br>      return {<br>          refreshToken: await response.refresh_token, <br>          expirationTime: await response.expires_at,<br>          accessToken: await response.access_token<br>      }<br>  } catch (error) {<br>      console.log(error);<br>  }<br><br>}<br><br><br><br>const persistNewTokenData = async (newTokenData) => {<br>  // Read the .env file<br>  const envBuffer = fs.readFileSync('.env');<br>  const envConfig = dotenv.parse(envBuffer);<br><br>  // Update the relevant key with the new value<br>  envConfig['STRAVA_EXPIRATION_TIME'] = newTokenData.expirationTime,<br>  envConfig['STRAVA_CACHED_REFRESH_TOKEN'] = newTokenData.refreshToken,<br>  envConfig['STRAVA_CACHED_TOKEN'] = newTokenData.accessToken<br><br>  // Write the updated key-value pair to the file<br>  const envText = Object.keys(envConfig).map(key => `${key}=${envConfig[key]}`).join('\\n');<br>  await fs.promises.writeFile('.env', envText);<br>};<br><br><br><br>const getStravaActivityData = async () => {<br>  console.log('Requesting activity data from Strava...');<br>  let myHeaders = new Headers();<br>  myHeaders.append(\"Authorization\", `Bearer ${process.env.STRAVA_CACHED_TOKEN}`);<br><br>  const requestOptions = {<br>    method: 'GET',<br>    headers: myHeaders,<br>    redirect: 'follow'<br>  };<br><br>  try {<br>      const response = await fetch(\"https://www.strava.com/api/v3/athlete/activities\", requestOptions);<br>      return response.json();<br><br>  } catch (error) {<br>      console.log('error', error)<br>  }   <br>}<br><br>//check to see if the expiration time has passed<br>const executeStravaLogic = async () => {<br>  const isTokenExpired = isStravaTokenExpired(process.env.STRAVA_EXPIRATION_TIME);<br><br>  if (typeof isTokenExpired === 'string') {<br>      console.log('Please resolve the error with the current expiration time stored in the .env file.');<br>      return;<br>  } else if (isTokenExpired) {<br>      console.log('The expiration time has passed. Generating a new token...');<br>      //if yes - generate a new token<br>      const newTokenData = await generateNewToken();<br>      if (!newTokenData.expirationTime) {<br>          console.log('There was an error getting refresh token data.')<br>          return;<br>      } <br>      //save the new token info to .env<br>      persistNewTokenData(newTokenData);<br><br>  } <br>  //make request to Strava activities endpoint<br>  const stravaActivityData = await getStravaActivityData();<br>  return stravaActivityData;<br>};<br><br>app.get('/api/strava', executeStravaLogic);</pre><p>Feel free to use what works for you and scrap what doesn’t.</p><p>Enjoy!</p><h3>Level Up Coding</h3><p>Thanks for being a part of our community! Before you go:</p><ul><li>👏 Clap for the story and follow the author 👉</li><li>📰 View more content in the <a href=\"https://levelup.gitconnected.com/?utm_source=pub&utm_medium=post\">Level Up Coding publication</a></li><li>💰 Free coding interview course ⇒ <a href=\"https://skilled.dev/?utm_source=luc&utm_medium=article\">View Course</a></li><li>🔔 Follow us: <a href=\"https://twitter.com/gitconnected\">Twitter</a> | <a href=\"https://www.linkedin.com/company/gitconnected\">LinkedIn</a> | <a href=\"https://newsletter.levelup.dev\">Newsletter</a></li></ul><p>🚀👉 <a href=\"https://jobs.levelup.dev/talent/welcome?referral=true\"><strong>Join the Level Up talent collective and find an amazing job</strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=40244b17df2c\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://levelup.gitconnected.com/integrating-with-the-strava-api-40244b17df2c\">Integrating with the Strava API</a> was originally published in <a href=\"https://levelup.gitconnected.com\">Level Up Coding</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","media":{}},{"id":"https://medium.com/p/9778ad618cb4","title":"A Brief Introduction to Object Oriented Programming","link":"https://levelup.gitconnected.com/a-brief-introduction-to-object-oriented-programming-9778ad618cb4?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1682427096000,"created":1682427096000,"category":["javascript","object-oriented","technology","software-development"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gl2Fec_0-qHDo6JX6BD_eQ.png\" /></figure><h3>What is it?</h3><p>Object oriented programming (OOP) is a commonly used programming model that focuses on the use of classes and objects to create a codebase that is simple and reusable. It centers around the following concepts:</p><ul><li>Abstraction</li><li>Polymorphism</li><li>Inheritance</li><li>Encapsulation</li></ul><h3>What is it used for?</h3><p>By focusing on creating reusable pieces, OOP limits code duplication, makes code easier to read, and allows for the separation of concerns.</p><p>Due to its benefits and flexibility OOP can be used in nearly any type of project.</p><p>As it is so common and useful a framework, it’s generally something prospective employers will look for knowledge of either in a take home challenge or as a direct interview question.</p><h3>What does it look like?</h3><p>Without object oriented programming, you might write a piece of code in Javascript that looks like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/690/0*HCPAWA7wbp2GF9AD\" /></figure><p>The above example simply instantiates variables for different aspects of a dog and the declares a function to make use of one of those variables.</p><p>There are a few problems with this in that the variables are globally scoped leaving them open to collision or accidental manipulation, the pieces of code are not connected in any meaningful way — they’re all just hanging out in the global scope, and the code isn’t reusable — it has specific values for the declared variables which makes this pretty useless outside of describing a single dog.</p><p>We can make a big change to all of that without writing too much additional code.</p><p>Here is a refactor towards object oriented programming:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ci-yKu8COxextRav2VuGnA.png\" /></figure><p>If we focus on the image to the left, we can see that the previous code which was loosely defined is now housed together in a single structure. This makes the code more readable in that we can easily tell that it’s all meant to be related.</p><p>The variables and function are now scoped to the class that was created which ensures less opportunity for collision or for them to be accidentally changed.</p><p>Additionally, the class we’ve created is now reusable. It isn’t limited to a single dog but is now broad enough to be able to accommodate any animal we’d like to supply. We can see this in action in the image on the right where dog and cat constants are declared and the class function is being made use of for each.</p><p>Much better, right?</p><h3>Class Syntax in Javascript</h3><p>I know you’re dying to get to the principles of object oriented programming, and we will get there, but first let’s take a closer look at the syntax for creating a class in Javascript.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*AfTQZzBqenALJB5e\" /></figure><p>Here we have a Bike class (it’s conventional to use camel casing for class names with the first letter also capitalized).</p><p>We initialize with the class keyword, the name of the class (in this case, Bike), and then curly braces {} .</p><p>From there, we create a constructor which holds the variables with which you can instantiate new instances of your class. In this case, those variables are make, model, and color. For example, you can create new instances of Bike using different values:</p><pre>const firstBike = new Bike('Trek', 'Madone', 'Red');<br><br>const secondBike = new Bike('Bianchi', 'Oltre', 'Black');</pre><p>After the constructor, functions can be declared. Note that the syntax here doesn’t use the function keyword. You can just go ahead and give your function a name and you’re rolling.</p><h3>The Four Principles Of OOP</h3><p>Ok, now we know what object oriented programming looks like and why it’s useful. Let’s move onto some OOP terminology that you can throw out in an interview to get the job and that you should keep in mind as you’re writing clean, reusable code.</p><p>1.<strong> Encapsulation<br></strong>We’ve discussed this concept already, so let’s put a name to it. Encapsulation refers to the grouping of related functions and properties together to connect concepts and create DRY (do not repeat yourself) code.</p><p>Remember when we looked at the block of code where everything was declared in the global scope? Encapsulation fixes the problems that can bring by housing related code in one data structure (be that a class or an object):</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mUuGqsb9zmiMYrjawhRYfA.png\" /></figure><p>2. <strong>Abstraction<br></strong>We haven’t discussed this much yet but the concept of abstraction means to hide the complexity of your code or not allow the alteration of certain fields. You can think of this like any mechanical device (ex. a radio, microwave, TV, etc.). When you want to turn any of those things on, there is a mechanism to do so (ex. push a button). The actual mechanical functions that are performed to turn the appliance on within the device are not known to most of us and, frankly, we don’t much care as long as the thing turns on. The user has those processes obscured by the simplicity of the button push. That concept can also be applied to object oriented programming as abstraction.</p><p>Abstraction can be achieved in code through <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getters</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setters</a> which allow a user to only access or update certain fields in structured ways. We won’t talk much about how those work specifically here but managing how a user can see and make changes to the fields in your code makes a big difference in safeguarding the functionality of what you’ve written.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GWiphbQ7iUB0a2KpR006OA.png\" /></figure><p>In the above example, we can see that the Shape class on the left has no access methods which encourages direct manipulation of the constructor. In contrast, the example on the right has specific methods that are written to get and set the number of sides a shape might have. The functionality is a bit simplistic for the sake of explanation there, but you can also add in checks to ensure things like the number of sides provided is actually a number and not another datatype.</p><p>3. <strong>Inheritance</strong> <br>Inheritance simply refers to child classes having the attributes of their parent classes passed down to them. This allows a programmer to write less code since methods that have already been written for a parent class don’t need to be rewritten for a child class to have access to them.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oHP0MjuAhzJLvKMiryKl6A.png\" /></figure><p>In the example above, a Person class is declared on the left with a method called introduceYourself() included on it. We can see on the right that a Student class is created which extends the Person class. This means that all of the functionality that the Person class has, the Student class also now has which we can see in action with the sayNameAndGrade() method on the Student class which makes use of the Person class’s introduceYourself() method without redefining it.</p><p>4. <strong>Polymorphism<br></strong>Within the concept of polymorphism, the functionality of a child/parent chain of classes is determined at runtime. An example of polymorphism could be the method of a child class overriding the same method on a parent class. As the name suggests, through polymorphism object functionality can take “many forms”. The interaction between parent and children classes can be as simple as the child class inheriting functionality from the parent class or it can be more complex with overlapping methods or child functionality overriding that of the parent. This complexity is called polymorphism and it gives a developer more options in terms of what choices to make with the many available tools a chain or family of classes provides.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Xoi6pxsm-htiEXy5ZDuv5w.png\" /></figure><p>We can see a simple example above with the code on the left defining a Shape class. That class has a method on it called calcArea(). On the right, we see that Rectangle and Triangle classes extend the Shape class. These two child classes also each have a calcArea() method. When we create a Triangle instance and call calcArea() on it, it’s not the Shape's calcArea() function that is invoked, but the Triangle's. This is a simple example, but it does illustrate the flexibility inherent in working with classes that we call polymorphism.</p><p>Alright! That’s it! The last bit of wisdom I’ll leave you with is a way to remember object oriented programming terminology so you can always be ready to write better code or to ace an interview:</p><p><strong>A</strong>bstraction</p><p><strong>P</strong>olymorphism<br><strong>I</strong>nheritance<br><strong>E</strong>ncapsulation</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FpdfnRGpNQzePC%2Ftwitter%2Fiframe&display_name=Giphy&url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FpdfnRGpNQzePC%2Fgiphy.gif&image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FpdfnRGpNQzePC%2Fgiphy.gif&key=a19fcc184b9711e1b4764040d3dc5c07&type=text%2Fhtml&schema=giphy\" width=\"435\" height=\"441\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d26b4e949290277c6b356aba411cda8c/href\">https://medium.com/media/d26b4e949290277c6b356aba411cda8c/href</a></iframe><h3>Additional Resources</h3><ul><li><a href=\"https://www.educative.io/blog/object-oriented-programming\">https://www.educative.io/blog/object-oriented-programming</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming</a></li><li><a href=\"https://www.quickstart.com/blog/10-applications-of-object-oriented-programming/\">https://www.quickstart.com/blog/10-applications-of-object-oriented-programming/</a></li><li><a href=\"https://www.youtube.com/watch?v=pTB0EiLXUC8\">https://www.youtube.com/watch?v=pTB0EiLXUC8</a></li></ul><h3>Level Up Coding</h3><p>Thanks for being a part of our community! Before you go:</p><ul><li>👏 Clap for the story and follow the author 👉</li><li>📰 View more content in the <a href=\"https://levelup.gitconnected.com/?utm_source=pub&utm_medium=post\">Level Up Coding publication</a></li><li>💰 Free coding interview course ⇒ <a href=\"https://skilled.dev/?utm_source=luc&utm_medium=article\">View Course</a></li><li>🔔 Follow us: <a href=\"https://twitter.com/gitconnected\">Twitter</a> | <a href=\"https://www.linkedin.com/company/gitconnected\">LinkedIn</a> | <a href=\"https://newsletter.levelup.dev\">Newsletter</a></li></ul><p>🚀👉 <a href=\"https://jobs.levelup.dev/talent/welcome?referral=true\"><strong>Join the Level Up talent collective and find an amazing job</strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9778ad618cb4\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://levelup.gitconnected.com/a-brief-introduction-to-object-oriented-programming-9778ad618cb4\">A Brief Introduction to Object Oriented Programming</a> was originally published in <a href=\"https://levelup.gitconnected.com\">Level Up Coding</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gl2Fec_0-qHDo6JX6BD_eQ.png\" /></figure><h3>What is it?</h3><p>Object oriented programming (OOP) is a commonly used programming model that focuses on the use of classes and objects to create a codebase that is simple and reusable. It centers around the following concepts:</p><ul><li>Abstraction</li><li>Polymorphism</li><li>Inheritance</li><li>Encapsulation</li></ul><h3>What is it used for?</h3><p>By focusing on creating reusable pieces, OOP limits code duplication, makes code easier to read, and allows for the separation of concerns.</p><p>Due to its benefits and flexibility OOP can be used in nearly any type of project.</p><p>As it is so common and useful a framework, it’s generally something prospective employers will look for knowledge of either in a take home challenge or as a direct interview question.</p><h3>What does it look like?</h3><p>Without object oriented programming, you might write a piece of code in Javascript that looks like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/690/0*HCPAWA7wbp2GF9AD\" /></figure><p>The above example simply instantiates variables for different aspects of a dog and the declares a function to make use of one of those variables.</p><p>There are a few problems with this in that the variables are globally scoped leaving them open to collision or accidental manipulation, the pieces of code are not connected in any meaningful way — they’re all just hanging out in the global scope, and the code isn’t reusable — it has specific values for the declared variables which makes this pretty useless outside of describing a single dog.</p><p>We can make a big change to all of that without writing too much additional code.</p><p>Here is a refactor towards object oriented programming:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ci-yKu8COxextRav2VuGnA.png\" /></figure><p>If we focus on the image to the left, we can see that the previous code which was loosely defined is now housed together in a single structure. This makes the code more readable in that we can easily tell that it’s all meant to be related.</p><p>The variables and function are now scoped to the class that was created which ensures less opportunity for collision or for them to be accidentally changed.</p><p>Additionally, the class we’ve created is now reusable. It isn’t limited to a single dog but is now broad enough to be able to accommodate any animal we’d like to supply. We can see this in action in the image on the right where dog and cat constants are declared and the class function is being made use of for each.</p><p>Much better, right?</p><h3>Class Syntax in Javascript</h3><p>I know you’re dying to get to the principles of object oriented programming, and we will get there, but first let’s take a closer look at the syntax for creating a class in Javascript.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*AfTQZzBqenALJB5e\" /></figure><p>Here we have a Bike class (it’s conventional to use camel casing for class names with the first letter also capitalized).</p><p>We initialize with the class keyword, the name of the class (in this case, Bike), and then curly braces {} .</p><p>From there, we create a constructor which holds the variables with which you can instantiate new instances of your class. In this case, those variables are make, model, and color. For example, you can create new instances of Bike using different values:</p><pre>const firstBike = new Bike('Trek', 'Madone', 'Red');<br><br>const secondBike = new Bike('Bianchi', 'Oltre', 'Black');</pre><p>After the constructor, functions can be declared. Note that the syntax here doesn’t use the function keyword. You can just go ahead and give your function a name and you’re rolling.</p><h3>The Four Principles Of OOP</h3><p>Ok, now we know what object oriented programming looks like and why it’s useful. Let’s move onto some OOP terminology that you can throw out in an interview to get the job and that you should keep in mind as you’re writing clean, reusable code.</p><p>1.<strong> Encapsulation<br></strong>We’ve discussed this concept already, so let’s put a name to it. Encapsulation refers to the grouping of related functions and properties together to connect concepts and create DRY (do not repeat yourself) code.</p><p>Remember when we looked at the block of code where everything was declared in the global scope? Encapsulation fixes the problems that can bring by housing related code in one data structure (be that a class or an object):</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mUuGqsb9zmiMYrjawhRYfA.png\" /></figure><p>2. <strong>Abstraction<br></strong>We haven’t discussed this much yet but the concept of abstraction means to hide the complexity of your code or not allow the alteration of certain fields. You can think of this like any mechanical device (ex. a radio, microwave, TV, etc.). When you want to turn any of those things on, there is a mechanism to do so (ex. push a button). The actual mechanical functions that are performed to turn the appliance on within the device are not known to most of us and, frankly, we don’t much care as long as the thing turns on. The user has those processes obscured by the simplicity of the button push. That concept can also be applied to object oriented programming as abstraction.</p><p>Abstraction can be achieved in code through <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getters</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setters</a> which allow a user to only access or update certain fields in structured ways. We won’t talk much about how those work specifically here but managing how a user can see and make changes to the fields in your code makes a big difference in safeguarding the functionality of what you’ve written.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GWiphbQ7iUB0a2KpR006OA.png\" /></figure><p>In the above example, we can see that the Shape class on the left has no access methods which encourages direct manipulation of the constructor. In contrast, the example on the right has specific methods that are written to get and set the number of sides a shape might have. The functionality is a bit simplistic for the sake of explanation there, but you can also add in checks to ensure things like the number of sides provided is actually a number and not another datatype.</p><p>3. <strong>Inheritance</strong> <br>Inheritance simply refers to child classes having the attributes of their parent classes passed down to them. This allows a programmer to write less code since methods that have already been written for a parent class don’t need to be rewritten for a child class to have access to them.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oHP0MjuAhzJLvKMiryKl6A.png\" /></figure><p>In the example above, a Person class is declared on the left with a method called introduceYourself() included on it. We can see on the right that a Student class is created which extends the Person class. This means that all of the functionality that the Person class has, the Student class also now has which we can see in action with the sayNameAndGrade() method on the Student class which makes use of the Person class’s introduceYourself() method without redefining it.</p><p>4. <strong>Polymorphism<br></strong>Within the concept of polymorphism, the functionality of a child/parent chain of classes is determined at runtime. An example of polymorphism could be the method of a child class overriding the same method on a parent class. As the name suggests, through polymorphism object functionality can take “many forms”. The interaction between parent and children classes can be as simple as the child class inheriting functionality from the parent class or it can be more complex with overlapping methods or child functionality overriding that of the parent. This complexity is called polymorphism and it gives a developer more options in terms of what choices to make with the many available tools a chain or family of classes provides.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Xoi6pxsm-htiEXy5ZDuv5w.png\" /></figure><p>We can see a simple example above with the code on the left defining a Shape class. That class has a method on it called calcArea(). On the right, we see that Rectangle and Triangle classes extend the Shape class. These two child classes also each have a calcArea() method. When we create a Triangle instance and call calcArea() on it, it’s not the Shape's calcArea() function that is invoked, but the Triangle's. This is a simple example, but it does illustrate the flexibility inherent in working with classes that we call polymorphism.</p><p>Alright! That’s it! The last bit of wisdom I’ll leave you with is a way to remember object oriented programming terminology so you can always be ready to write better code or to ace an interview:</p><p><strong>A</strong>bstraction</p><p><strong>P</strong>olymorphism<br><strong>I</strong>nheritance<br><strong>E</strong>ncapsulation</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FpdfnRGpNQzePC%2Ftwitter%2Fiframe&display_name=Giphy&url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FpdfnRGpNQzePC%2Fgiphy.gif&image=https%3A%2F%2Fi.giphy.com%2Fmedia%2FpdfnRGpNQzePC%2Fgiphy.gif&key=a19fcc184b9711e1b4764040d3dc5c07&type=text%2Fhtml&schema=giphy\" width=\"435\" height=\"441\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d26b4e949290277c6b356aba411cda8c/href\">https://medium.com/media/d26b4e949290277c6b356aba411cda8c/href</a></iframe><h3>Additional Resources</h3><ul><li><a href=\"https://www.educative.io/blog/object-oriented-programming\">https://www.educative.io/blog/object-oriented-programming</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming</a></li><li><a href=\"https://www.quickstart.com/blog/10-applications-of-object-oriented-programming/\">https://www.quickstart.com/blog/10-applications-of-object-oriented-programming/</a></li><li><a href=\"https://www.youtube.com/watch?v=pTB0EiLXUC8\">https://www.youtube.com/watch?v=pTB0EiLXUC8</a></li></ul><h3>Level Up Coding</h3><p>Thanks for being a part of our community! Before you go:</p><ul><li>👏 Clap for the story and follow the author 👉</li><li>📰 View more content in the <a href=\"https://levelup.gitconnected.com/?utm_source=pub&utm_medium=post\">Level Up Coding publication</a></li><li>💰 Free coding interview course ⇒ <a href=\"https://skilled.dev/?utm_source=luc&utm_medium=article\">View Course</a></li><li>🔔 Follow us: <a href=\"https://twitter.com/gitconnected\">Twitter</a> | <a href=\"https://www.linkedin.com/company/gitconnected\">LinkedIn</a> | <a href=\"https://newsletter.levelup.dev\">Newsletter</a></li></ul><p>🚀👉 <a href=\"https://jobs.levelup.dev/talent/welcome?referral=true\"><strong>Join the Level Up talent collective and find an amazing job</strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9778ad618cb4\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://levelup.gitconnected.com/a-brief-introduction-to-object-oriented-programming-9778ad618cb4\">A Brief Introduction to Object Oriented Programming</a> was originally published in <a href=\"https://levelup.gitconnected.com\">Level Up Coding</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","media":{}},{"id":"https://medium.com/p/17f6e29a07ba","title":"A Guide to Immediately Invoked Function Expressions (IIFE)","link":"https://medium.com/@spencer.attick/a-guide-to-immediately-invoked-function-expressions-iife-17f6e29a07ba?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1681325789000,"created":1681325789000,"category":["javascript","security","code","software-development","technology"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*7pftY0s3dvBFetJr\" /><figcaption><a href=\"https://unsplash.com/@polarmermaid\">Anne Nygård</a> for <a href=\"https://unsplash.com/photos/rTC5SF27jIc\">Unsplash</a></figcaption></figure><h3>What is an IIFE?</h3><p>An immediately-invoked function expression works just the way it sounds — it is a function that is run immediately after it is declared.</p><p>The syntax looks like this:</p><pre>(() => {<br>  console.log(\"Hello, I am a self-invoking arrow function!\");<br>})();</pre><p>Running a file containing an IIFE demonstrates that the tradition syntax that is generally needed to call the function isn’t used. The function just runs where it’s been declared:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F9HX8PcNQFZoCjZ9K7j1Aw.png\" /></figure><h3>Ok, but when should I use this?</h3><p>There are a few reasons why you need to know about IIFEs as a Javascript developer. Here are the top four:</p><p>1.<strong> Creating a private scope</strong>: When you define variables inside an IIFE, they are not accessible outside of the function. This helps to prevent naming conflicts with other variables in your code. This is useful when you want to create a module or library that can be used in different parts of your application without worrying about variable conflicts. Here is an example of private scope in an IIFE keeping a value secured within the function scope:</p><pre>const myModule = (() => {<br>  const privateValue = 'secret';<br>  <br>  const publicMethod = () => {<br>    console.log(`The private value is ${privateValue}`);<br>  };<br><br>  return {<br>    publicMethod: publicMethod<br>  };<br>})();<br><br>myModule.publicMethod(); // Output: The private value is secret<br>console.log(myModule.privateValue); // Output: undefined</pre><p>2. <strong>Avoiding global variables</strong>: Global variables can be accessed from anywhere in your code and can lead to naming conflicts and unexpected behavior. By wrapping your code in an IIFE, you can keep your variables and functions local to the IIFE and avoid polluting the global namespace.</p><p>3. <strong>Running code immediately</strong>: Sometimes you might have a block of code that needs to be executed immediately when your script is loaded. By wrapping that code in an IIFE, you can ensure that it runs immediately without having to call a separate function.</p><p>4. <strong>Caching values</strong>: If you have a value that is expensive to compute or retrieve, you can use an IIFE to cache the value and use it multiple times without recomputing or retrieving it.</p><p>Here’s an example of an IIFE that implements a simple caching mechanism using <a href=\"https://medium.com/@spencer.attick/scope-and-hoisting-and-closure-in-javascript-7f03b1b9e1b9\">closure</a>:</p><pre>const getData = (() => {<br>  let cache = {};<br><br>  const getDataFromServer = async (url) => {<br>    // Make an AJAX request to the server to get the data<br>    const response = await fetch(url);<br>    const data = await response.json();<br>    <br>    // Cache the data for future requests<br>    cache[url] = data;<br>    return data;<br>  };<br><br>  return async (url) => {<br>    if (cache[url]) {<br>      // If the data is already in the cache, return it<br>      console.log(\"Returning cached data\");<br>      return Promise.resolve(cache[url]);<br>    } else {<br>      // If the data is not in the cache, get it from the server and cache it<br>      console.log(\"Fetching data from server\");<br>      return getDataFromServer(url);<br>    }<br>  };<br>})();<br><br>// Use the getData function to fetch data from a URL<br>getData(\"https://jsonplaceholder.typicode.com/posts/1\")<br>  .then(data => console.log(data));<br><br>// The second time we call the function with the same URL, it will return the cached data<br>getData(\"https://jsonplaceholder.typicode.com/posts/1\")<br>  .then(data => console.log(data));</pre><p>In this example, we are using an IIFE to create a function called getData, which implements a simple caching mechanism for fetching data from a server. The function uses closure to store a private cache object, which is used to cache the data for future requests.</p><p>When the getData function is called with a URL, it checks if the data is already in the cache. If it is, it returns the cached data immediately. If not, it makes an AJAX request to the server to get the data, and then caches it for future requests.</p><p>By using an IIFE to create the getData function, we can ensure that the cache object is only accessible within the function, and cannot be modified or accessed by external code. This can help improve the reliability and performance of our application by avoiding unnecessary requests to the server and reducing network traffic.</p><h3>What do I need to know about IIFE with ES6?</h3><p>IIFEs have been a part of JavaScript since the beginning, and can be used in all versions of the language.</p><p>However, ES6 did introduce a new way to create blocks of code with their own scope, called “block scoping”. Block scoping can be achieved using the let and const keywords, which allow you to define variables with block scope rather than function scope.</p><p>So while self-invoking functions are not specific to ES6, the concept of creating local scopes has been enhanced by ES6 with the addition of block scoping.</p><p>This technique is often used to create a local scope for variables and functions, as the variables and functions defined inside the IIFE are not accessible outside of it.</p><p><strong>Have you found an innovate use case for IIFEs? If so, I’d love to hear about it!</strong></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=17f6e29a07ba\" width=\"1\" height=\"1\" alt=\"\">","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*7pftY0s3dvBFetJr\" /><figcaption><a href=\"https://unsplash.com/@polarmermaid\">Anne Nygård</a> for <a href=\"https://unsplash.com/photos/rTC5SF27jIc\">Unsplash</a></figcaption></figure><h3>What is an IIFE?</h3><p>An immediately-invoked function expression works just the way it sounds — it is a function that is run immediately after it is declared.</p><p>The syntax looks like this:</p><pre>(() => {<br>  console.log(\"Hello, I am a self-invoking arrow function!\");<br>})();</pre><p>Running a file containing an IIFE demonstrates that the tradition syntax that is generally needed to call the function isn’t used. The function just runs where it’s been declared:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F9HX8PcNQFZoCjZ9K7j1Aw.png\" /></figure><h3>Ok, but when should I use this?</h3><p>There are a few reasons why you need to know about IIFEs as a Javascript developer. Here are the top four:</p><p>1.<strong> Creating a private scope</strong>: When you define variables inside an IIFE, they are not accessible outside of the function. This helps to prevent naming conflicts with other variables in your code. This is useful when you want to create a module or library that can be used in different parts of your application without worrying about variable conflicts. Here is an example of private scope in an IIFE keeping a value secured within the function scope:</p><pre>const myModule = (() => {<br>  const privateValue = 'secret';<br>  <br>  const publicMethod = () => {<br>    console.log(`The private value is ${privateValue}`);<br>  };<br><br>  return {<br>    publicMethod: publicMethod<br>  };<br>})();<br><br>myModule.publicMethod(); // Output: The private value is secret<br>console.log(myModule.privateValue); // Output: undefined</pre><p>2. <strong>Avoiding global variables</strong>: Global variables can be accessed from anywhere in your code and can lead to naming conflicts and unexpected behavior. By wrapping your code in an IIFE, you can keep your variables and functions local to the IIFE and avoid polluting the global namespace.</p><p>3. <strong>Running code immediately</strong>: Sometimes you might have a block of code that needs to be executed immediately when your script is loaded. By wrapping that code in an IIFE, you can ensure that it runs immediately without having to call a separate function.</p><p>4. <strong>Caching values</strong>: If you have a value that is expensive to compute or retrieve, you can use an IIFE to cache the value and use it multiple times without recomputing or retrieving it.</p><p>Here’s an example of an IIFE that implements a simple caching mechanism using <a href=\"https://medium.com/@spencer.attick/scope-and-hoisting-and-closure-in-javascript-7f03b1b9e1b9\">closure</a>:</p><pre>const getData = (() => {<br>  let cache = {};<br><br>  const getDataFromServer = async (url) => {<br>    // Make an AJAX request to the server to get the data<br>    const response = await fetch(url);<br>    const data = await response.json();<br>    <br>    // Cache the data for future requests<br>    cache[url] = data;<br>    return data;<br>  };<br><br>  return async (url) => {<br>    if (cache[url]) {<br>      // If the data is already in the cache, return it<br>      console.log(\"Returning cached data\");<br>      return Promise.resolve(cache[url]);<br>    } else {<br>      // If the data is not in the cache, get it from the server and cache it<br>      console.log(\"Fetching data from server\");<br>      return getDataFromServer(url);<br>    }<br>  };<br>})();<br><br>// Use the getData function to fetch data from a URL<br>getData(\"https://jsonplaceholder.typicode.com/posts/1\")<br>  .then(data => console.log(data));<br><br>// The second time we call the function with the same URL, it will return the cached data<br>getData(\"https://jsonplaceholder.typicode.com/posts/1\")<br>  .then(data => console.log(data));</pre><p>In this example, we are using an IIFE to create a function called getData, which implements a simple caching mechanism for fetching data from a server. The function uses closure to store a private cache object, which is used to cache the data for future requests.</p><p>When the getData function is called with a URL, it checks if the data is already in the cache. If it is, it returns the cached data immediately. If not, it makes an AJAX request to the server to get the data, and then caches it for future requests.</p><p>By using an IIFE to create the getData function, we can ensure that the cache object is only accessible within the function, and cannot be modified or accessed by external code. This can help improve the reliability and performance of our application by avoiding unnecessary requests to the server and reducing network traffic.</p><h3>What do I need to know about IIFE with ES6?</h3><p>IIFEs have been a part of JavaScript since the beginning, and can be used in all versions of the language.</p><p>However, ES6 did introduce a new way to create blocks of code with their own scope, called “block scoping”. Block scoping can be achieved using the let and const keywords, which allow you to define variables with block scope rather than function scope.</p><p>So while self-invoking functions are not specific to ES6, the concept of creating local scopes has been enhanced by ES6 with the addition of block scoping.</p><p>This technique is often used to create a local scope for variables and functions, as the variables and functions defined inside the IIFE are not accessible outside of it.</p><p><strong>Have you found an innovate use case for IIFEs? If so, I’d love to hear about it!</strong></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=17f6e29a07ba\" width=\"1\" height=\"1\" alt=\"\">","media":{}},{"id":"https://medium.com/p/c3214c897b4c","title":"Project: Script to Automatically Update Resources in my Portfolio","link":"https://medium.com/@spencer.attick/project-script-to-automatically-update-resources-in-my-portfolio-c3214c897b4c?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1681220946000,"created":1681220946000,"category":["portfolio","nodejs","software-development","javascript","script"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vZRWE4hgPBQzHTTQj8jsUw.png\" /></figure><p>As I fine-tuned the code I had written to power my portfolio, I ran into a problem with hosting. I had originally wanted to host on <a href=\"https://pages.github.com/\">Github Pages</a> which ended up being easy to get set up with but which I quickly learned would serve static assets only and would not be able to run my server file. I had been excited about the prospect of having live data on my site pulled from Medium and Goodreads so running into this limitation this was a bit of a set back. It is important to me to be able to pull in realtime data to showcase my up to date blog posts, projects breakdowns, and books that I’m reading in my portfolio and that wasn’t functionality I was willing to give up.</p><h3>The Problem</h3><p>I looked around for another hosting solution but was unable to find anything that didn’t require a credit card to be put down up front. As a strict money conscience individual, that didn’t fit what I was looking for to host a small project like my portfolio.</p><p>I didn’t want to have to update my resources manually for obvious reasons but I still wanted to make sure viewers to my portfolio were getting an up to date experience.</p><p>The solution I landed on was to write a script that could clone my portfolio’s code onto my desktop, make requests to ask Medium and Goodreads for my RSS feeds, add that data into my portfolio, and push the results back up to Github when it was run. That way, fresh data would be served just by me running a single terminal command.</p><p>This wasn’t as clean a solution as finding hosting service that would read my server file and make outgoing requests itself, but it was going to give me the opportunity to learn a few new things in the form of writing such a script.</p><h3>The Work</h3><p>To get started here, I first need to learn about the child_processes module in Node.js (<a href=\"https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/\">this resource was really helpful</a>). With that knowledge in hand, I was able to use the exec() function as well as the Node.js <a href=\"https://www.w3schools.com/nodejs/nodejs_filesystem.asp\">File System</a> module to look for my portfolio on my desktop, git clone it if it didn’t exist, make the outgoing requests for new data, add the updated data to the project, and then git push the updated files to Github. From there, Github Pages served that new data.</p><p>This process required me to have static assets holding the RSS returns (which I parsed to JSON) from both Medium and Goodreads. To get that data compiled through Vite, I also had to run the npm run build command in my script before pushing to Github.</p><p>Another consideration here was formatting in terms of the logging I was doing. As this script impacts my portfolio (which I’d, of course, always want to be in working condition), I added fairly robust logging to ensure that I could easily see which parts of the script were running and what errors, if any, were surfacing. This resulted in quite a few lines being printed to the console. Keeping everything organized was a small challenge and one I met with <a href=\"https://blog.logrocket.com/using-console-colors-node-js/\">console coloring</a> through ASCII.</p><p>Finally, I wanted to add testing into the mix as I was making changes to my portfolio and pushing them automatically to Github. As I was coding my project I was repeatedly sending unnecessary updates to Github to test functionality when I should have had a test file in place that I could run instead of making production runs of the script. To resolve this, I created a Mocha test file and added a test suite there to ensure the functionality of all the different aspects of my code.</p><p>With all of that in place, making quick updates has been incredibly easy. I run my script once a day (which takes less than a second) and my portfolio is refreshed with up to date information that I can rely on. I still hope to formally host the whole project, including the server, but while I’m shopping around for good options, I have this in place so as to not lose out on my portfolio’s functionality.</p><h3>The Code</h3><p>The code for this project can be found here: <a href=\"https://github.com/spencerattick/staticResourcesPortfolioScript\">https://github.com/spencerattick/staticResourcesPortfolioScript</a>.</p><h3>What I Learned</h3><p>I had a lot of fun coding this (hopefully) temporary solution to a blocker that I was running into! I got to learn about child_processes and console coloring in terms of new technical skills gained. I also got a refresher on why it’s important to start with tests in place or write them out as the project progresses so as to not have to rely on running the project over and over to catch bugs and gain verification. I’ll definitely be writing my tests sooner next time.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c3214c897b4c\" width=\"1\" height=\"1\" alt=\"\">","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vZRWE4hgPBQzHTTQj8jsUw.png\" /></figure><p>As I fine-tuned the code I had written to power my portfolio, I ran into a problem with hosting. I had originally wanted to host on <a href=\"https://pages.github.com/\">Github Pages</a> which ended up being easy to get set up with but which I quickly learned would serve static assets only and would not be able to run my server file. I had been excited about the prospect of having live data on my site pulled from Medium and Goodreads so running into this limitation this was a bit of a set back. It is important to me to be able to pull in realtime data to showcase my up to date blog posts, projects breakdowns, and books that I’m reading in my portfolio and that wasn’t functionality I was willing to give up.</p><h3>The Problem</h3><p>I looked around for another hosting solution but was unable to find anything that didn’t require a credit card to be put down up front. As a strict money conscience individual, that didn’t fit what I was looking for to host a small project like my portfolio.</p><p>I didn’t want to have to update my resources manually for obvious reasons but I still wanted to make sure viewers to my portfolio were getting an up to date experience.</p><p>The solution I landed on was to write a script that could clone my portfolio’s code onto my desktop, make requests to ask Medium and Goodreads for my RSS feeds, add that data into my portfolio, and push the results back up to Github when it was run. That way, fresh data would be served just by me running a single terminal command.</p><p>This wasn’t as clean a solution as finding hosting service that would read my server file and make outgoing requests itself, but it was going to give me the opportunity to learn a few new things in the form of writing such a script.</p><h3>The Work</h3><p>To get started here, I first need to learn about the child_processes module in Node.js (<a href=\"https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/\">this resource was really helpful</a>). With that knowledge in hand, I was able to use the exec() function as well as the Node.js <a href=\"https://www.w3schools.com/nodejs/nodejs_filesystem.asp\">File System</a> module to look for my portfolio on my desktop, git clone it if it didn’t exist, make the outgoing requests for new data, add the updated data to the project, and then git push the updated files to Github. From there, Github Pages served that new data.</p><p>This process required me to have static assets holding the RSS returns (which I parsed to JSON) from both Medium and Goodreads. To get that data compiled through Vite, I also had to run the npm run build command in my script before pushing to Github.</p><p>Another consideration here was formatting in terms of the logging I was doing. As this script impacts my portfolio (which I’d, of course, always want to be in working condition), I added fairly robust logging to ensure that I could easily see which parts of the script were running and what errors, if any, were surfacing. This resulted in quite a few lines being printed to the console. Keeping everything organized was a small challenge and one I met with <a href=\"https://blog.logrocket.com/using-console-colors-node-js/\">console coloring</a> through ASCII.</p><p>Finally, I wanted to add testing into the mix as I was making changes to my portfolio and pushing them automatically to Github. As I was coding my project I was repeatedly sending unnecessary updates to Github to test functionality when I should have had a test file in place that I could run instead of making production runs of the script. To resolve this, I created a Mocha test file and added a test suite there to ensure the functionality of all the different aspects of my code.</p><p>With all of that in place, making quick updates has been incredibly easy. I run my script once a day (which takes less than a second) and my portfolio is refreshed with up to date information that I can rely on. I still hope to formally host the whole project, including the server, but while I’m shopping around for good options, I have this in place so as to not lose out on my portfolio’s functionality.</p><h3>The Code</h3><p>The code for this project can be found here: <a href=\"https://github.com/spencerattick/staticResourcesPortfolioScript\">https://github.com/spencerattick/staticResourcesPortfolioScript</a>.</p><h3>What I Learned</h3><p>I had a lot of fun coding this (hopefully) temporary solution to a blocker that I was running into! I got to learn about child_processes and console coloring in terms of new technical skills gained. I also got a refresher on why it’s important to start with tests in place or write them out as the project progresses so as to not have to rely on running the project over and over to catch bugs and gain verification. I’ll definitely be writing my tests sooner next time.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c3214c897b4c\" width=\"1\" height=\"1\" alt=\"\">","media":{}},{"id":"https://medium.com/p/a4c2e35b2558","title":"Project: Creating Code Examples for Segment’s Server-Side Libraries","link":"https://medium.com/@spencer.attick/project-creating-code-examples-for-all-of-segments-server-side-libraries-a4c2e35b2558?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1680791081000,"created":1680791081000,"category":["python","segment","servers","ruby","nodejs"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NsbBkVmGzpP_f-d3R58xJw.png\" /></figure><p>As a tool for ingesting data from many disparate locations to be piped to a large suite of downstream tools, <a href=\"https://segment.com/\">Segment</a> requires the flexibility to be easily used in as many codebases as possible. As such, their product is <a href=\"https://segment.com/docs/connections/sources/catalog/\">supported in a number of libraries</a> built to accommodate use in different languages.</p><p>That being the case, Segment’s Success Engineering team is tasked with being able to debug issues customers might have with each of those libraries. Many folks on the team are deeply familiar with one or two of the supported languages but there were a few most folks didn’t know and some that no one has experience with.</p><h3>The Problem</h3><p>As a result, debugging customer issues with some of these languages could take an inordinate amount of time. Just getting a test project set up in some of these languages can be tricky and take quite a while if someone is doing it for the first time or hasn’t done it in a while. Even setting up something fairly simple that one does know well takes at least a few minutes. All of the time getting set up was causing frustration among the Success Engineering team, bringing down the number of simultaneous tickets any one person could be working on, and creating a situation where the customer was waiting to get unblocked for much longer than need be.</p><p>Half the time, reproducing the customer’s issue wasn’t the problem, just understanding how to set up a Java or PHP project or working with another language less familiar to the team and figuring out how to add Segment to it was the blocker.</p><p>Segment’s public documentation has detailed instructions for how to add Segment to a project but not on how to spin up a project in the first place. Depending on an individual’s level of knowledge, it can be tricky to get set up with Segment in a tool you’re unfamiliar with.</p><h3>The Work</h3><p>Realizing this glaring problem that was preventing myself and my colleagues from quickly reproducing customer issues to help them be able to move forward, I decided I needed to create a one-stop-shop solution to be able to spin up a project in any of the languages Segment supported without getting blocked by not being familiar them.</p><p>To this end, I’d worked with <a href=\"https://replit.com/~\">Replit</a> before and decided I would start there. Their platform allows users to spin up entire projects completely in the browser without needing to install anything onto a machine. Projects created there can also be forked and used by others without the need for package installation or any other setup. This seemed like the perfect place to house projects that could mock Segment implementations in various languages without Success Engineers getting stuck on the logistics of setting something up themselves.</p><p>I was able to get about half of Segment’s server-side libraries to work with Replit such that Success Engineers on my team could go ahead and fork the project, make any small changes they needed for their own testing (although the projects will run with just the push of a button at that point), and then proceed with their debugging. This saved them the often time consuming task of having to get anything set up locally, worrying about what to install and where, and many of the other nuances that can come up when using a new tool.</p><p>Once I wrote the necessary configuration code for each language and installed the requisite packages, everything worked out of the box for my team.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*M33VkVSexG130ubbUsgr8w.png\" /></figure><p>There are a few Segment libraries that Replit either doesn’t support the languages for at all such as .NET or for which other limitations came into play such as Replit not allowing outside packages to be loaded in with Clojure.</p><p>In those cases, I worked to spin up instances of each library locally and provided detailed instructions to help my teammates get up and running as quickly as possible. I found that this took a lot of the guesswork and Googling out of the setup process for folks (and for myself when I came back to a library after weeks or even months of not needing to use it).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eNMkUCgq7UoISYitQL8D1w.png\" /></figure><p>When Replit wasn’t available, having those instructions on hand hugely sped up the debugging process for my team.</p><p>While this was a project I spearheaded, I did also get to collaborate with my colleagues on it. A couple of the library installation instructions were either added or enhanced by teammates who were inspired to help ensure all of Segment’s libraries had a guide to get our team quickly up and running whenever necessary.</p><p>In addition to providing Replit projects and/or setup instructions for each library, this initiative also ended with a very comprehensive and living document where folks can continue to add new learnings (ex. how to add logging or specific syntax) so that anyone needing to use additional features wouldn’t be blocked.</p><p>After this was all up and running I went through all of Segment’s libraries (client and server-side) to create a second document that housed syntax for adding the context object which is an optional section of information that can be added to each payload. It isn’t always straightforward to figure out how to add it if you’re not familiar with a particular language so I wanted to make sure folks had that resource on hand as well.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*76N5bdEGTxzN7dktHS9XWA.png\" /></figure><p>These technical documents have really sped up the time to resolution for our customers, have driven down the amount of time Success Engineers need to spend spinning up a project in a certain language, and have allowed my team to navigate tickets regarding Segment libraries with much more ease.</p><h3>The Code</h3><p>Each link here will take you to the Replit for each implementation. Please note that these project instances are actively used for testing and may look a little messy as a result since we’re running different configurations on the fly to get customers their answers as quickly as possible.</p><p><a href=\"https://replit.com/@ryanattick/Segment-Java-Test-Server#Main.java\">Java</a></p><p><a href=\"https://repl.it/@ryanattick/Segment-Python-Test-Server\">Python</a></p><p><a href=\"https://repl.it/@ryanattick/Segment-Ruby-Test-Server#main.rb\">Ruby</a></p><p><a href=\"https://repl.it/@ryanattick/Segment-Go-Test-Server\">Go</a></p><p><a href=\"https://repl.it/@ryanattick/Segment-Nodejs-Test-Server#index.js\">Node.js</a></p><p>Unfortunately, I can’t share more here as the rest of the document is housed as part of Segment’s internal resources.</p><h3>What I Learned</h3><p>This project was a great way to get experience working (albeit on a small scale) with numerous different languages and tools. I was able to spend time with documentation for languages I’m not as familiar with and to get a sense of what each language requires. It was an awesome opportunity to get to write code in several different languages and to add great benefit to my team as a result.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a4c2e35b2558\" width=\"1\" height=\"1\" alt=\"\">","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NsbBkVmGzpP_f-d3R58xJw.png\" /></figure><p>As a tool for ingesting data from many disparate locations to be piped to a large suite of downstream tools, <a href=\"https://segment.com/\">Segment</a> requires the flexibility to be easily used in as many codebases as possible. As such, their product is <a href=\"https://segment.com/docs/connections/sources/catalog/\">supported in a number of libraries</a> built to accommodate use in different languages.</p><p>That being the case, Segment’s Success Engineering team is tasked with being able to debug issues customers might have with each of those libraries. Many folks on the team are deeply familiar with one or two of the supported languages but there were a few most folks didn’t know and some that no one has experience with.</p><h3>The Problem</h3><p>As a result, debugging customer issues with some of these languages could take an inordinate amount of time. Just getting a test project set up in some of these languages can be tricky and take quite a while if someone is doing it for the first time or hasn’t done it in a while. Even setting up something fairly simple that one does know well takes at least a few minutes. All of the time getting set up was causing frustration among the Success Engineering team, bringing down the number of simultaneous tickets any one person could be working on, and creating a situation where the customer was waiting to get unblocked for much longer than need be.</p><p>Half the time, reproducing the customer’s issue wasn’t the problem, just understanding how to set up a Java or PHP project or working with another language less familiar to the team and figuring out how to add Segment to it was the blocker.</p><p>Segment’s public documentation has detailed instructions for how to add Segment to a project but not on how to spin up a project in the first place. Depending on an individual’s level of knowledge, it can be tricky to get set up with Segment in a tool you’re unfamiliar with.</p><h3>The Work</h3><p>Realizing this glaring problem that was preventing myself and my colleagues from quickly reproducing customer issues to help them be able to move forward, I decided I needed to create a one-stop-shop solution to be able to spin up a project in any of the languages Segment supported without getting blocked by not being familiar them.</p><p>To this end, I’d worked with <a href=\"https://replit.com/~\">Replit</a> before and decided I would start there. Their platform allows users to spin up entire projects completely in the browser without needing to install anything onto a machine. Projects created there can also be forked and used by others without the need for package installation or any other setup. This seemed like the perfect place to house projects that could mock Segment implementations in various languages without Success Engineers getting stuck on the logistics of setting something up themselves.</p><p>I was able to get about half of Segment’s server-side libraries to work with Replit such that Success Engineers on my team could go ahead and fork the project, make any small changes they needed for their own testing (although the projects will run with just the push of a button at that point), and then proceed with their debugging. This saved them the often time consuming task of having to get anything set up locally, worrying about what to install and where, and many of the other nuances that can come up when using a new tool.</p><p>Once I wrote the necessary configuration code for each language and installed the requisite packages, everything worked out of the box for my team.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*M33VkVSexG130ubbUsgr8w.png\" /></figure><p>There are a few Segment libraries that Replit either doesn’t support the languages for at all such as .NET or for which other limitations came into play such as Replit not allowing outside packages to be loaded in with Clojure.</p><p>In those cases, I worked to spin up instances of each library locally and provided detailed instructions to help my teammates get up and running as quickly as possible. I found that this took a lot of the guesswork and Googling out of the setup process for folks (and for myself when I came back to a library after weeks or even months of not needing to use it).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eNMkUCgq7UoISYitQL8D1w.png\" /></figure><p>When Replit wasn’t available, having those instructions on hand hugely sped up the debugging process for my team.</p><p>While this was a project I spearheaded, I did also get to collaborate with my colleagues on it. A couple of the library installation instructions were either added or enhanced by teammates who were inspired to help ensure all of Segment’s libraries had a guide to get our team quickly up and running whenever necessary.</p><p>In addition to providing Replit projects and/or setup instructions for each library, this initiative also ended with a very comprehensive and living document where folks can continue to add new learnings (ex. how to add logging or specific syntax) so that anyone needing to use additional features wouldn’t be blocked.</p><p>After this was all up and running I went through all of Segment’s libraries (client and server-side) to create a second document that housed syntax for adding the context object which is an optional section of information that can be added to each payload. It isn’t always straightforward to figure out how to add it if you’re not familiar with a particular language so I wanted to make sure folks had that resource on hand as well.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*76N5bdEGTxzN7dktHS9XWA.png\" /></figure><p>These technical documents have really sped up the time to resolution for our customers, have driven down the amount of time Success Engineers need to spend spinning up a project in a certain language, and have allowed my team to navigate tickets regarding Segment libraries with much more ease.</p><h3>The Code</h3><p>Each link here will take you to the Replit for each implementation. Please note that these project instances are actively used for testing and may look a little messy as a result since we’re running different configurations on the fly to get customers their answers as quickly as possible.</p><p><a href=\"https://replit.com/@ryanattick/Segment-Java-Test-Server#Main.java\">Java</a></p><p><a href=\"https://repl.it/@ryanattick/Segment-Python-Test-Server\">Python</a></p><p><a href=\"https://repl.it/@ryanattick/Segment-Ruby-Test-Server#main.rb\">Ruby</a></p><p><a href=\"https://repl.it/@ryanattick/Segment-Go-Test-Server\">Go</a></p><p><a href=\"https://repl.it/@ryanattick/Segment-Nodejs-Test-Server#index.js\">Node.js</a></p><p>Unfortunately, I can’t share more here as the rest of the document is housed as part of Segment’s internal resources.</p><h3>What I Learned</h3><p>This project was a great way to get experience working (albeit on a small scale) with numerous different languages and tools. I was able to spend time with documentation for languages I’m not as familiar with and to get a sense of what each language requires. It was an awesome opportunity to get to write code in several different languages and to add great benefit to my team as a result.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a4c2e35b2558\" width=\"1\" height=\"1\" alt=\"\">","media":{}},{"id":"https://medium.com/p/fc36c10c02e5","title":"Project: Story Points","link":"https://medium.com/@spencer.attick/project-story-points-fc36c10c02e5?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1680618193000,"created":1680618193000,"category":["javascript","support","optimization","zendesk","story-points"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/974/1*IP4DIumbvyRYrwvEvdUUIQ.png\" /></figure><p>As a Success Engineer hoping to level up my engineering skills, I spoke to my manager at the time to get some ideas of what I could do that would be of benefit to the team. She shared an idea she’d had for a while of configuring a story points addition to the current metrics we held around taking and solving technical support tickets.</p><h3>The Problem</h3><p>No support ticket is created equal with some being substantially harder to debug and much more time consuming than others. To date, my team had mostly been using ticket volume per person to get a sense of everyone’s current workload. As tickets vary so much in difficulty, just using raw counts didn’t give managers a clear picture into what someone’s workload was like at any given time.</p><p>The team already collected a variety of data points for each ticket that gave a sense of context such as what Segment plan tier the customer was using, what topic they were asking about, and a few other things. With that information at hand, an educated guess could be made about how difficult an individual ticket would be.</p><p>My team uses Zendesk for support ticketing and we already had an app in place on that platform to collect the number of tickets each person was fielding at once. This was helpful, but didn’t provide a wholistic picture.</p><p>Enter <a href=\"https://www.atlassian.com/agile/project-management/estimation#:~:text=Story%20points%20are%20units%20of,work%2C%20and%20risk%20or%20uncertainty.\">story points</a>.</p><p>At a high-level, story points are meant to assign a numeric value to the difficulty of a task relative to other, similar tasks which is useful in things like helping managers understand how to prioritize projects or, in our case, better understand individual workload.</p><p>With all that in mind, I was off to get this metric improvement figured out!</p><h3>The Work</h3><p>I knew this project would not only involve coming up with a programmatic solution to calculate story points per ticket, but would also require Zendesk and a custom server to communicate so that I could grab the metrics we were already tracking from Zendesk, send it off to my codebase, have the codebase come up with the appropriate numbers, and then send that data back to Zendesk so that it could be displayed in our existing ticket counter app.</p><p>To get started, I mulled over my hosting options, not wanting to complicate things too much or rely on a hosting platform that might need its own upkeep. I quickly decided to use some of my company, Segment’s, own functionality to write the code to power this project: <a href=\"https://segment.com/docs/connections/functions/source-functions/\">Source Functions</a>.</p><p>Source Functions collect data via webhook and then allow custom code to be written to alter or parse that data before Segment’s systems ingest it into its traditional pipeline. From there, that altered data can be sent downstream to connected destinations. While Segment does have a pre-built connection to <a href=\"https://segment.com/docs/connections/destinations/catalog/zendesk/\">Zendesk</a> as a destination already established, I didn’t feel it was right for my use case. More on that later.</p><p>After landing on a hosting option that actually didn’t require me to do much by way of setting the project up, I went ahead and configured Segment’s Zendesk instance to send requests to my Source Function. The information I sent over included all of the fields I felt would give me the best ability to determine a ticket’s difficulty. The most useful of these were plan tier, topic, and subtopic.</p><p>In terms of plan tier, larger customers generally have more a complex implementation and more access to other folks at Segment so their questions tended to be more involved than those of other users. As for topic and subtopic, some aspects of Segment’s pipeline and feature offerings (naturally) are more difficult to debug than others. Taking all of this into account gave me a fairly accurate ability to assign a number based on those factors to a ticket. Of course, I didn’t just trust my own instincts here, I reached out to my entire team to help with calibration.</p><p>I wanted to ensure transparency in terms of what point value I was assigning to each ticket so in my Source Function, I make a call back to Zendesk to add a field on each ticket to let the ticket holder know what point value has been assigned which looks like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/582/1*KGRSb_yHxxWZAGk8fhqGYw.png\" /></figure><p>As far as I know, Zendesk doesn’t have a field that works well to hold static values, so I left a note for my team not to edit that value. Though in terms of the way the process works, any update there wouldn’t have actually mattered and would have just been programmatically changed back down the line. I also shared the code that dictated the point values with my team so they could reference it if the number seemed higher or lower than they expected relative to the amount of time and effort they were spending a particular ticket. From there, I also put a Slack workflow in place to help folks report tickets where points didn’t align with the actual work that they were doing to help with team calibration such that the system could work as seamlessly as possible.</p><p>The code itself consists of objects containing all of the fields available in Zendesk and their point values (as determined by the team) depended on the level of difficultly generally associated with them:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/778/1*35kpLUb3oh5TspekZNXd3w.png\" /></figure><p>From there, logic is in place to add points up based on which fields are used:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gi6u5kf2QXG1PftbM8HMYg.png\" /></figure><p>After that, a request is made into Segment’s pipeline with metadata so that the result of the process can be viewed and parsed in a downstream warehouse:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_mST3XRQ64PQ69bGk9us9g.png\" /></figure><p>Additionally, an outgoing API request is made in the body of the Source Function to update Zendesk with the necessary data. This functionality goes outside of what Segment offers in its out-of-the-box integration with <a href=\"https://segment.com/docs/connections/destinations/catalog/zendesk/\">Zendesk</a> so a custom request to Zendesk’s <a href=\"https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/\">Tickets API</a> was needed.</p><p>With all of the code and API functionality in place, the last piece of this project was to capture total points in aggregate for each individual which demonstrates how many points they have for all of their open, pending, and on-hold tickets combined:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/676/1*zGOb2HfZZFUOKp1CHRUSOw.png\" /></figure><p>This involved accessing an existing codebase my team maintains, getting a feel for how it works, and then adding to it to get the functionality pictured above.</p><p>The end product here is more visibility for managers and teammates around workload with more depth than just count of tickets. Being able to see who is most or least busy can help mitigate overwhelm by ensuring folks don’t take on more than they can handle or can offload some tickets to focus on others. It can also help managers quickly see who has a bit more capacity if an urgent or difficult case comes through the pipeline that need immediate attention.</p><h3>The Code</h3><p>Unfortunately, the full code for this project isn’t public as it concerns an internal Segment process and lives within my private Segment workspace. I’ve included screenshots above to give a general sense of what it looks like and what it does.</p><h3>What I Learned</h3><p>This project was really fun! It gave me some practice improving an internal process and getting different tools to talk to each other. This worked really well for the team and has been in place for a couple of years now. We recently rolled out some new functionality on the team and went ahead and copied the code for this project to put in place a similar metrics system it for a new part of our workflow.</p><p>The one piece of this that can’t be automated is adding in point values for new topics that come up as Segment’s pipeline grows. A person on the team will need to decide what point value to add based on how easy or difficult a topic is known to be. As such, I recently onboarded some newer team members to go through and make updates where that made sense. It felt great to get this project up and running, see its value over the past couple of years, and then to find others on the team who were interested in maintaining and hopefully building on what I originally put in place.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fc36c10c02e5\" width=\"1\" height=\"1\" alt=\"\">","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/974/1*IP4DIumbvyRYrwvEvdUUIQ.png\" /></figure><p>As a Success Engineer hoping to level up my engineering skills, I spoke to my manager at the time to get some ideas of what I could do that would be of benefit to the team. She shared an idea she’d had for a while of configuring a story points addition to the current metrics we held around taking and solving technical support tickets.</p><h3>The Problem</h3><p>No support ticket is created equal with some being substantially harder to debug and much more time consuming than others. To date, my team had mostly been using ticket volume per person to get a sense of everyone’s current workload. As tickets vary so much in difficulty, just using raw counts didn’t give managers a clear picture into what someone’s workload was like at any given time.</p><p>The team already collected a variety of data points for each ticket that gave a sense of context such as what Segment plan tier the customer was using, what topic they were asking about, and a few other things. With that information at hand, an educated guess could be made about how difficult an individual ticket would be.</p><p>My team uses Zendesk for support ticketing and we already had an app in place on that platform to collect the number of tickets each person was fielding at once. This was helpful, but didn’t provide a wholistic picture.</p><p>Enter <a href=\"https://www.atlassian.com/agile/project-management/estimation#:~:text=Story%20points%20are%20units%20of,work%2C%20and%20risk%20or%20uncertainty.\">story points</a>.</p><p>At a high-level, story points are meant to assign a numeric value to the difficulty of a task relative to other, similar tasks which is useful in things like helping managers understand how to prioritize projects or, in our case, better understand individual workload.</p><p>With all that in mind, I was off to get this metric improvement figured out!</p><h3>The Work</h3><p>I knew this project would not only involve coming up with a programmatic solution to calculate story points per ticket, but would also require Zendesk and a custom server to communicate so that I could grab the metrics we were already tracking from Zendesk, send it off to my codebase, have the codebase come up with the appropriate numbers, and then send that data back to Zendesk so that it could be displayed in our existing ticket counter app.</p><p>To get started, I mulled over my hosting options, not wanting to complicate things too much or rely on a hosting platform that might need its own upkeep. I quickly decided to use some of my company, Segment’s, own functionality to write the code to power this project: <a href=\"https://segment.com/docs/connections/functions/source-functions/\">Source Functions</a>.</p><p>Source Functions collect data via webhook and then allow custom code to be written to alter or parse that data before Segment’s systems ingest it into its traditional pipeline. From there, that altered data can be sent downstream to connected destinations. While Segment does have a pre-built connection to <a href=\"https://segment.com/docs/connections/destinations/catalog/zendesk/\">Zendesk</a> as a destination already established, I didn’t feel it was right for my use case. More on that later.</p><p>After landing on a hosting option that actually didn’t require me to do much by way of setting the project up, I went ahead and configured Segment’s Zendesk instance to send requests to my Source Function. The information I sent over included all of the fields I felt would give me the best ability to determine a ticket’s difficulty. The most useful of these were plan tier, topic, and subtopic.</p><p>In terms of plan tier, larger customers generally have more a complex implementation and more access to other folks at Segment so their questions tended to be more involved than those of other users. As for topic and subtopic, some aspects of Segment’s pipeline and feature offerings (naturally) are more difficult to debug than others. Taking all of this into account gave me a fairly accurate ability to assign a number based on those factors to a ticket. Of course, I didn’t just trust my own instincts here, I reached out to my entire team to help with calibration.</p><p>I wanted to ensure transparency in terms of what point value I was assigning to each ticket so in my Source Function, I make a call back to Zendesk to add a field on each ticket to let the ticket holder know what point value has been assigned which looks like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/582/1*KGRSb_yHxxWZAGk8fhqGYw.png\" /></figure><p>As far as I know, Zendesk doesn’t have a field that works well to hold static values, so I left a note for my team not to edit that value. Though in terms of the way the process works, any update there wouldn’t have actually mattered and would have just been programmatically changed back down the line. I also shared the code that dictated the point values with my team so they could reference it if the number seemed higher or lower than they expected relative to the amount of time and effort they were spending a particular ticket. From there, I also put a Slack workflow in place to help folks report tickets where points didn’t align with the actual work that they were doing to help with team calibration such that the system could work as seamlessly as possible.</p><p>The code itself consists of objects containing all of the fields available in Zendesk and their point values (as determined by the team) depended on the level of difficultly generally associated with them:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/778/1*35kpLUb3oh5TspekZNXd3w.png\" /></figure><p>From there, logic is in place to add points up based on which fields are used:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gi6u5kf2QXG1PftbM8HMYg.png\" /></figure><p>After that, a request is made into Segment’s pipeline with metadata so that the result of the process can be viewed and parsed in a downstream warehouse:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_mST3XRQ64PQ69bGk9us9g.png\" /></figure><p>Additionally, an outgoing API request is made in the body of the Source Function to update Zendesk with the necessary data. This functionality goes outside of what Segment offers in its out-of-the-box integration with <a href=\"https://segment.com/docs/connections/destinations/catalog/zendesk/\">Zendesk</a> so a custom request to Zendesk’s <a href=\"https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/\">Tickets API</a> was needed.</p><p>With all of the code and API functionality in place, the last piece of this project was to capture total points in aggregate for each individual which demonstrates how many points they have for all of their open, pending, and on-hold tickets combined:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/676/1*zGOb2HfZZFUOKp1CHRUSOw.png\" /></figure><p>This involved accessing an existing codebase my team maintains, getting a feel for how it works, and then adding to it to get the functionality pictured above.</p><p>The end product here is more visibility for managers and teammates around workload with more depth than just count of tickets. Being able to see who is most or least busy can help mitigate overwhelm by ensuring folks don’t take on more than they can handle or can offload some tickets to focus on others. It can also help managers quickly see who has a bit more capacity if an urgent or difficult case comes through the pipeline that need immediate attention.</p><h3>The Code</h3><p>Unfortunately, the full code for this project isn’t public as it concerns an internal Segment process and lives within my private Segment workspace. I’ve included screenshots above to give a general sense of what it looks like and what it does.</p><h3>What I Learned</h3><p>This project was really fun! It gave me some practice improving an internal process and getting different tools to talk to each other. This worked really well for the team and has been in place for a couple of years now. We recently rolled out some new functionality on the team and went ahead and copied the code for this project to put in place a similar metrics system it for a new part of our workflow.</p><p>The one piece of this that can’t be automated is adding in point values for new topics that come up as Segment’s pipeline grows. A person on the team will need to decide what point value to add based on how easy or difficult a topic is known to be. As such, I recently onboarded some newer team members to go through and make updates where that made sense. It felt great to get this project up and running, see its value over the past couple of years, and then to find others on the team who were interested in maintaining and hopefully building on what I originally put in place.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fc36c10c02e5\" width=\"1\" height=\"1\" alt=\"\">","media":{}},{"id":"https://medium.com/p/f5efe0afd046","title":"Project: Updating Segment’s analytics-node Library to Include TypeScript","link":"https://medium.com/@spencer.attick/project-updating-segments-analytics-node-library-to-include-typescript-f5efe0afd046?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1678993785000,"created":1678993785000,"category":["segment","codecademy","node","typescript"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UU7ZZ5HrY8Iq7OfJrk2P2Q.png\" /></figure><p>In working as a Success Engineer at Segment, I’ve gotten a chance to get very familiar with the integration libraries Segment offers in various languages. In looking for some proactive ways I could help out our customer-base, I noticed several folks asking for TypeScript support in Segment’s <a href=\"https://segment.com/docs/connections/sources/catalog/libraries/server/node/\">analytics-node</a> library. Having never worked with TypeScript, I thought it would be a great opportunity to gain some experience with a technology new to me.</p><h3>The Problem</h3><p>A few customers had pointed out that they had run into issues using Segment’s analytics-node library that could have easily been avoided if the library had been refactored to use TypeScript. They pointed out that the addition would be fairly easy and wouldn’t take much time. Reading through requests for TypeScript that could have saved our customers time and frustration, I went ahead and took the project onto make the update.</p><h3>The Work</h3><p>The first step I took was to take <a href=\"https://www.codecademy.com/learn/learn-typescript\">Codecademy’s fantastic course on TypeScript</a> to learn what it was all about. There I got practice with the syntax and requirements that TypeScript imposes on top of Javascript. The course also shared the reasons behind TypeScript and how to get started in using it more broadly.</p><p>From there, I forked Segment’s existing library to get a refresher on how it worked currently.</p><p>After getting the lay of the land, I consulted <a href=\"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html\">TypeScript’s documentation</a> regarding migration from a Javascript project to one written in TypeScript. After all, I had just been learning in Codecademy’s pre-established environment and had yet to write any TypeScript in the wild. I found the documentation to be very straightforward and soon had the project configured correctly to throw TypeScript errors that I could then work through solving.</p><p>Before hopping into that error set, I saw immediately that there were some obvious changes I could make in terms of adding types to variables already listed at the top of the main file and taking on other small updates.</p><p>After making any necessary changes that stood out to me, I went back and forth running the TypeScript file and the existing test file that the Segment team had written to correct the code making sure to gradually reduce errors that cropped up in either place. I ran into many TypeScript file updates breaking the test file and vice versa which was a truly great learning experience complete with countless trips to Stack Overflow.</p><p>As I was acquiring a ton of new knowledge and had cleared out most of the errors that TypeScript had found and all of the ones that came up through Segment’s test suite, I became aware that Segment was actually writing a brand new library for Node and that the one I was working on would be relegated to maintenance mode. Upon learning that, I didn’t want to leave my project unfinished so I worked on cleaning up the last few errors before ultimately submitting all of my updates as a pull request. I was concerned they wouldn’t merge a change like this with the new library on the horizon so I did disable a few pieces of TypeScript functionality to get my pull request in before too much time elapsed. My hope was that I could continue to work on the project and clear those final errors if the team was interested in merging my code. When the team reviewed what I had written, they were appreciative but ultimately decided not to more forward with it in favor of the new library.</p><p>In the end, I got a lot of value from the opportunity my role gave me to find a gap like this, to learn the necessary technology, and to refactor existing code to meet the needs of Segment’s customers. Even though my code wasn’t merged it was a great learning experience.</p><h3>The Code</h3><p>Here is the pull request I made on the analytics-node library to incorporate TypeScript: <a href=\"https://github.com/segmentio/analytics-node/pull/356\">https://github.com/segmentio/analytics-node/pull/356</a>.</p><h3>What I Learned</h3><p>I got to learn TypeScript!</p><p>More importantly, I also learned that, though I was interested in working on a project just to help out and to practice a new skill, it would have been a good step to take to communicate with Segment’s libraries team about my interested in making the update. If I had, perhaps they would have been able to share that they were already working on something new and I could have seen if there was anything I could have helped with in that codebase instead.</p><p>Overall, I got some excellent experience in terms of technology and process that I can take with me onto whatever comes next!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f5efe0afd046\" width=\"1\" height=\"1\" alt=\"\">","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UU7ZZ5HrY8Iq7OfJrk2P2Q.png\" /></figure><p>In working as a Success Engineer at Segment, I’ve gotten a chance to get very familiar with the integration libraries Segment offers in various languages. In looking for some proactive ways I could help out our customer-base, I noticed several folks asking for TypeScript support in Segment’s <a href=\"https://segment.com/docs/connections/sources/catalog/libraries/server/node/\">analytics-node</a> library. Having never worked with TypeScript, I thought it would be a great opportunity to gain some experience with a technology new to me.</p><h3>The Problem</h3><p>A few customers had pointed out that they had run into issues using Segment’s analytics-node library that could have easily been avoided if the library had been refactored to use TypeScript. They pointed out that the addition would be fairly easy and wouldn’t take much time. Reading through requests for TypeScript that could have saved our customers time and frustration, I went ahead and took the project onto make the update.</p><h3>The Work</h3><p>The first step I took was to take <a href=\"https://www.codecademy.com/learn/learn-typescript\">Codecademy’s fantastic course on TypeScript</a> to learn what it was all about. There I got practice with the syntax and requirements that TypeScript imposes on top of Javascript. The course also shared the reasons behind TypeScript and how to get started in using it more broadly.</p><p>From there, I forked Segment’s existing library to get a refresher on how it worked currently.</p><p>After getting the lay of the land, I consulted <a href=\"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html\">TypeScript’s documentation</a> regarding migration from a Javascript project to one written in TypeScript. After all, I had just been learning in Codecademy’s pre-established environment and had yet to write any TypeScript in the wild. I found the documentation to be very straightforward and soon had the project configured correctly to throw TypeScript errors that I could then work through solving.</p><p>Before hopping into that error set, I saw immediately that there were some obvious changes I could make in terms of adding types to variables already listed at the top of the main file and taking on other small updates.</p><p>After making any necessary changes that stood out to me, I went back and forth running the TypeScript file and the existing test file that the Segment team had written to correct the code making sure to gradually reduce errors that cropped up in either place. I ran into many TypeScript file updates breaking the test file and vice versa which was a truly great learning experience complete with countless trips to Stack Overflow.</p><p>As I was acquiring a ton of new knowledge and had cleared out most of the errors that TypeScript had found and all of the ones that came up through Segment’s test suite, I became aware that Segment was actually writing a brand new library for Node and that the one I was working on would be relegated to maintenance mode. Upon learning that, I didn’t want to leave my project unfinished so I worked on cleaning up the last few errors before ultimately submitting all of my updates as a pull request. I was concerned they wouldn’t merge a change like this with the new library on the horizon so I did disable a few pieces of TypeScript functionality to get my pull request in before too much time elapsed. My hope was that I could continue to work on the project and clear those final errors if the team was interested in merging my code. When the team reviewed what I had written, they were appreciative but ultimately decided not to more forward with it in favor of the new library.</p><p>In the end, I got a lot of value from the opportunity my role gave me to find a gap like this, to learn the necessary technology, and to refactor existing code to meet the needs of Segment’s customers. Even though my code wasn’t merged it was a great learning experience.</p><h3>The Code</h3><p>Here is the pull request I made on the analytics-node library to incorporate TypeScript: <a href=\"https://github.com/segmentio/analytics-node/pull/356\">https://github.com/segmentio/analytics-node/pull/356</a>.</p><h3>What I Learned</h3><p>I got to learn TypeScript!</p><p>More importantly, I also learned that, though I was interested in working on a project just to help out and to practice a new skill, it would have been a good step to take to communicate with Segment’s libraries team about my interested in making the update. If I had, perhaps they would have been able to share that they were already working on something new and I could have seen if there was anything I could have helped with in that codebase instead.</p><p>Overall, I got some excellent experience in terms of technology and process that I can take with me onto whatever comes next!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f5efe0afd046\" width=\"1\" height=\"1\" alt=\"\">","media":{}},{"id":"https://medium.com/p/9251d1438121","title":"Project: Segment Source Function — Auth0","link":"https://medium.com/@spencer.attick/project-segment-source-function-auth0-9251d1438121?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1678737033000,"created":1678737033000,"category":["auth0","javascript","node","segment"],"content":"<h3>Project: Segment Source Function — Auth0</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oFHanJWMIJFVh6Yr52Lviw.png\" /></figure><h3>Segment Source Functions</h3><p>As a Success Engineer at Segment, I’ve had great opportunities to practice and level-up my development skills. One of the ways I’ve used my coding skills to help our customers get set up as quickly as possible was to write a Function that met the needs of folks attempting to use a third-party tool and which removed the necessity for their teams to have to set up a file from scratch to accomplish the task they were interested in.</p><p>In the Segment ecosystem, a <a href=\"https://segment.com/docs/connections/functions/\">Function</a> is a feature where custom code can be written and executed either before data formally enters the Segment processing pipeline (Source Functions) or at the end of the pipeline to push data out to non-Segment entities (Destination Functions). Folks will usually use Functions to send data to Segment from a source that isn’t supported by the product directly or to send data out to a destination that Segment doesn’t support out-of-the-box. The Function environment is highly customizable and can act as a stand in for part of a customer’s codebase.</p><p>Because the feature is so open-ended, Segment maintains an open source <a href=\"https://github.com/segmentio/functions-library\">library</a> to give customers a starting point for writing Source or Destination Functions for entities that are frequently asked about.</p><p>When I saw two separate requests come in from customers in one week asking for help to send data into Segment from <a href=\"https://auth0.com/docs\">Auth0</a> I decided to take on the project of creating a connector template that customers could use to set that connection up without having to start from scratch.</p><h3>The Problem</h3><p>Auth0’s platform had <a href=\"https://auth0.com/docs/customize/extensions/export-log-events-with-extensions\">previously supported a direct integration to Segment </a>but was in the process of deprecating that connection. If customers wanted to send data from Auth0 to Segment, the easiest way to do so would be via a Source Function.</p><p>While Segment’s ingestion API has a particular data format it requires, a Source Function can accept any configuration of data (as long as it’s JSON). That means that customers can send data to a Source Function from nearly anywhere and then write custom code in their Function to transform that data into something Segment’s API will accept.</p><p>As such, the project here involved looking at the data Auth0 could send out to a webhook and then to write code to make that data usable within Segment in a way that wouldn’t make too many assumptions. After all, this was meant to be a reusable file that customers could change to fit their individual needs.</p><h3>The Work</h3><p>In looking at the data Auth0 sent out in their logs to a webhook, I noticed that they didn’t include an event name that could be easily referenced. Data is much more usable if it hits Segment with a coherent <a href=\"https://segment.com/docs/connections/spec/track/#event:~:text=Name%20of%20the%20action%20that%20a%20user%20has%20performed.%20See%20the%20Event%20field%20docs%20for%20more%20details.\">event name</a> that can be used to organize or analyze data in downstream tools (ex. Amplitude, Redshift, Mixpanel, Google Analytics, etc.). To this end, I found a <a href=\"https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\">guide</a> that maps log codes (which Auth0 sends in their payloads) to more easily understandable event names. I used that to start to build a payload that could be sent to Segment. From there, I opted to send all of the other pieces of information from the Auth0 log to Segment as <a href=\"https://segment.com/docs/connections/spec/track/#event:~:text=Free%2Dform%20dictionary,reserved%20property%20names.\">properties</a> so that customers could start with the whole set but, of course, could pare things down if they decided they needed to.</p><p>Once the information to be added to the payload the was sorted, I noticed that the resulting requests could be quite large. I wanted to make sure that the event my code generated would be within <a href=\"https://segment.com/docs/connections/sources/catalog/libraries/server/http-api/#max-request-size\">Segment’s size parameters</a> so I added some validation in to do that. If the payload was within Segment’s limit, my code would go ahead and send it on, if not, I opted to remove a section of the payload that I noticed often accounted for a size issue and didn’t seem like incredibly relevant data to hold onto. Of course, customers then had the template for doing this I wrote so they could easily decide to remove a different section based on what they found relevant. I left comments in my code to ensure these checks and the removal was obvious as Segment users come from all different backgrounds and some are more technical than others.</p><h3>The Code</h3><p>Segment’s teams are in the process of restructuring, so for now there is a backlog of pull requests on the Function’s library repo. That said, here is my pull request awaiting a time when it can be merged: <a href=\"https://github.com/segmentio/functions-library/pull/70\">https://github.com/segmentio/functions-library/pull/70</a>.</p><p>I’ve been able to share that solution with customers who’ve asked about getting set up with Auth0 so they don’t have to start from scratch.</p><p>Overall, this has been a great (albeit small) opportunity to get some practice while helping out Segment’s customer base.</p><h3>What I Learned</h3><p>Through this project, it was reinforced for me that I don’t need to take on a large-scale project to make an impact. A smaller implementation with just around ~150 lines of code can be great practice and can really help our customers get started with what they’re hoping to do so they can spend less time writing custom code and more time getting their data pipeline dialed in. Since this Function template is reusable, customers from here on out can use it however they see fit in order to send their Auth0 logs to Segment.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9251d1438121\" width=\"1\" height=\"1\" alt=\"\">","enclosures":[],"content_encoded":"<h3>Project: Segment Source Function — Auth0</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oFHanJWMIJFVh6Yr52Lviw.png\" /></figure><h3>Segment Source Functions</h3><p>As a Success Engineer at Segment, I’ve had great opportunities to practice and level-up my development skills. One of the ways I’ve used my coding skills to help our customers get set up as quickly as possible was to write a Function that met the needs of folks attempting to use a third-party tool and which removed the necessity for their teams to have to set up a file from scratch to accomplish the task they were interested in.</p><p>In the Segment ecosystem, a <a href=\"https://segment.com/docs/connections/functions/\">Function</a> is a feature where custom code can be written and executed either before data formally enters the Segment processing pipeline (Source Functions) or at the end of the pipeline to push data out to non-Segment entities (Destination Functions). Folks will usually use Functions to send data to Segment from a source that isn’t supported by the product directly or to send data out to a destination that Segment doesn’t support out-of-the-box. The Function environment is highly customizable and can act as a stand in for part of a customer’s codebase.</p><p>Because the feature is so open-ended, Segment maintains an open source <a href=\"https://github.com/segmentio/functions-library\">library</a> to give customers a starting point for writing Source or Destination Functions for entities that are frequently asked about.</p><p>When I saw two separate requests come in from customers in one week asking for help to send data into Segment from <a href=\"https://auth0.com/docs\">Auth0</a> I decided to take on the project of creating a connector template that customers could use to set that connection up without having to start from scratch.</p><h3>The Problem</h3><p>Auth0’s platform had <a href=\"https://auth0.com/docs/customize/extensions/export-log-events-with-extensions\">previously supported a direct integration to Segment </a>but was in the process of deprecating that connection. If customers wanted to send data from Auth0 to Segment, the easiest way to do so would be via a Source Function.</p><p>While Segment’s ingestion API has a particular data format it requires, a Source Function can accept any configuration of data (as long as it’s JSON). That means that customers can send data to a Source Function from nearly anywhere and then write custom code in their Function to transform that data into something Segment’s API will accept.</p><p>As such, the project here involved looking at the data Auth0 could send out to a webhook and then to write code to make that data usable within Segment in a way that wouldn’t make too many assumptions. After all, this was meant to be a reusable file that customers could change to fit their individual needs.</p><h3>The Work</h3><p>In looking at the data Auth0 sent out in their logs to a webhook, I noticed that they didn’t include an event name that could be easily referenced. Data is much more usable if it hits Segment with a coherent <a href=\"https://segment.com/docs/connections/spec/track/#event:~:text=Name%20of%20the%20action%20that%20a%20user%20has%20performed.%20See%20the%20Event%20field%20docs%20for%20more%20details.\">event name</a> that can be used to organize or analyze data in downstream tools (ex. Amplitude, Redshift, Mixpanel, Google Analytics, etc.). To this end, I found a <a href=\"https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\">guide</a> that maps log codes (which Auth0 sends in their payloads) to more easily understandable event names. I used that to start to build a payload that could be sent to Segment. From there, I opted to send all of the other pieces of information from the Auth0 log to Segment as <a href=\"https://segment.com/docs/connections/spec/track/#event:~:text=Free%2Dform%20dictionary,reserved%20property%20names.\">properties</a> so that customers could start with the whole set but, of course, could pare things down if they decided they needed to.</p><p>Once the information to be added to the payload the was sorted, I noticed that the resulting requests could be quite large. I wanted to make sure that the event my code generated would be within <a href=\"https://segment.com/docs/connections/sources/catalog/libraries/server/http-api/#max-request-size\">Segment’s size parameters</a> so I added some validation in to do that. If the payload was within Segment’s limit, my code would go ahead and send it on, if not, I opted to remove a section of the payload that I noticed often accounted for a size issue and didn’t seem like incredibly relevant data to hold onto. Of course, customers then had the template for doing this I wrote so they could easily decide to remove a different section based on what they found relevant. I left comments in my code to ensure these checks and the removal was obvious as Segment users come from all different backgrounds and some are more technical than others.</p><h3>The Code</h3><p>Segment’s teams are in the process of restructuring, so for now there is a backlog of pull requests on the Function’s library repo. That said, here is my pull request awaiting a time when it can be merged: <a href=\"https://github.com/segmentio/functions-library/pull/70\">https://github.com/segmentio/functions-library/pull/70</a>.</p><p>I’ve been able to share that solution with customers who’ve asked about getting set up with Auth0 so they don’t have to start from scratch.</p><p>Overall, this has been a great (albeit small) opportunity to get some practice while helping out Segment’s customer base.</p><h3>What I Learned</h3><p>Through this project, it was reinforced for me that I don’t need to take on a large-scale project to make an impact. A smaller implementation with just around ~150 lines of code can be great practice and can really help our customers get started with what they’re hoping to do so they can spend less time writing custom code and more time getting their data pipeline dialed in. Since this Function template is reusable, customers from here on out can use it however they see fit in order to send their Auth0 logs to Segment.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9251d1438121\" width=\"1\" height=\"1\" alt=\"\">","media":{}},{"id":"https://medium.com/p/7f03b1b9e1b9","title":"Scope, Hoisting, and Closure in Javascript","link":"https://medium.com/@spencer.attick/scope-and-hoisting-and-closure-in-javascript-7f03b1b9e1b9?source=rss-e5dc359f27c2------2","author":"Spencer Attick","published":1675365832000,"created":1675365832000,"category":["javascript-tips","hoisting","javascript","scopes","closure"],"content":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*qJ8E0-P3Y7pMgstD\" /><figcaption><a href=\"https://unsplash.com/@michael_surazhsky\">Michael Surazhsky</a> for <a href=\"https://unsplash.com/photos/RjgruH2TSA4\">Unsplash</a></figcaption></figure><p>So you’ve learned how to execute functions and have maybe even written a few simple programs. Nice! Now it’s time to level up with some more advanced Javascript concepts. Understanding scope, hoisting, and closure are essential to internalizing how your programs will run and what behavior you can expect for certain situations that can really trip you up if you’re unclear on these concepts.</p><p>Let’s get into it!</p><h3>Scope</h3><p>The first of these concepts to understand is scope. When we’re talking about scope we’re referring to where in the program variables are accessible. There are four types of scope:</p><p><strong>Global Scope</strong></p><p>With global scope, variables are declared in such a way that makes them accessible to an entire file. To scope variables globally you just declare them outside of any functions or modules. This isn’t recommended as you might declare a global variable, forget about it, and then attempt to use the same variable in a different way elsewhere in you code which can create unexpected behavior and cause confusion, especially if you’re working with a team.</p><p>Here is an example of a variable defined with global scope:</p><pre>// Define a global variable<br>let globalVariable = 'I am a global variable';<br><br>// Define a global function<br>function globalFunction() {<br>  console.log(globalVariable);<br>}<br><br>// Call the global function from anywhere in the program<br>globalFunction(); // outputs: 'I am a global variable'</pre><p>The globalVariable and globalFunction values can be referenced anywhere in the file in which they are instantiated (though there are some limitations around hoisting which we’ll discuss later).</p><p>In Javascript, each file you create has its own global scope. You can’t share information between files without modular scope.</p><p><strong>Modular Scope</strong></p><p>Modular scope refers to a process by which variables are encapsulated in a module (ES6 offers this functionality). That module can then be shared with other parts of your program. With modular scope, variables and functions can be accessed in their own module and any other places where that module is imported.</p><p>Here is an example:</p><pre>// Define a module<br>module.exports = {<br>  moduleVariable: 'I am a module variable',<br>  moduleFunction: function() {<br>    console.log(this.moduleVariable);<br>  }<br>};</pre><pre>// Import the module into another file<br>const myModule = require('./myModule');<br><br>// Call the module function<br>myModule.moduleFunction(); // outputs: 'I am a module variable'</pre><p><strong>Block Scope</strong></p><p>Block scope refers to anything contained between two curly braces {} . This includes things like variables created within a function or variables between curly braces inif statements.</p><p>Here in an example of block scoping:</p><pre>if (true) {<br>  let x = 10;<br>}<br>console.log(x); // ReferenceError: x is not defined</pre><p>The x variable is blocked scoped (due to the use of let) and cannot be referenced outside of the curly braces it is contained in.</p><p>Please note here that var is function scoped (we’ll talk about this in just a second) but let and const are block scoped. I won’t go into that too much about var here, but in 2023 there are very few cases where it is needed so Javascript developers should be sticking with let and const .</p><p><strong>Function Scope</strong></p><p>Function scope and block scope are essentially the same thing unless you’re using the var keyword. It’s a best practice when using Javascript to stick to const and let so you don’t have to worry about function scope outside of the concept of block scope.</p><p>The difference when using var is that it makes variables accessible anywhere in the function outside of blocks, whereas let and const can only be accessed in the blocks in which they are defined.</p><p>We can see this illustrated in the example below:</p><pre>function functionScope() {<br>  if (true) {<br>    var x = 10;<br>    let y = 20;<br>  }<br>  console.log(x); // 10<br>  console.log(y); // ReferenceError: y is not defined<br>}<br><br>functionScope();</pre><p>In this example, both x and y are declared within the block of the if statement, but x is declared using the var keyword, while y is declared using the let keyword.</p><p>Since var has function scope, it can be accessed outside of the block, and its value is logged to the console as 10. However, let has block scope, which means it is only accessible within the block so trying to access it outside will result in a ReferenceError.</p><h3>Hoisting</h3><p>Now that we’ve talked a bit about scope, let’s work on understanding the concept of hoisting. Essentially, hoisting takes some of your code and moves it to the top of its scope before the file is executed automatically with Javascript.</p><p>What get’s hoisted?</p><p>Function declarations (functions created using the function keyword) are hoisted in their entirety. Consider this example and feel free to run it on your end:</p><pre>thisGetsHoisted(); //HOISTED!<br><br><br>function thisGetsHoisted() {<br>  console.log('HOISTED!');<br>}</pre><p>The function is called before it is declared, but it still works! The reason for this is that the Javascript engine automatically hoists function declarations to the very top of the scope that the function occupies at runtime. Because of that, it has already stored thisGetsHoisted in memory such that it can be accessed before the file actually gets run.</p><p>Be careful though because the same thing will not happen with anonymous functions instantiated with let or const.</p><pre>thisGetsHoisted(); //ReferenceError: Cannot access 'thisGetsHoisted' before initialization<br><br><br>const thisGetsHoisted = () => {<br>  console.log('HOISTED!');<br>}</pre><p>The let and const keywords are not hoisted in the same way as function declarations. Space is also made for them in memory, but no value is assigned by Javascript which means a ReferenceError is thrown. Using anonymous functions with let and const helps you avoid the tricky behavior that can come about with hoisting in that it forces you to write your code such that functions are created in space <em>before</em> they are run.</p><p>We see the same thing if we attempt to access a variable rather than a function:</p><pre>console.log(isntHoisted); //ReferenceError: Cannot access 'isntHoisted' before initialization<br><br>let isntHoisted = 'nope';</pre><p>The var keyword has different behavior here (you knew it was coming). The Javascript engine will also create space in memory for var variables before running a file but instead of not assigning a value for those variables, Javascript will set them to undefined . Behaviorally, this means you still can’t use them before you initialize them (set a variable for them) in space, but you won’t get a ReferenceError if you try. Instead, the variable will just be treated as what it is, undefined:</p><pre>console.log(isntHoisted); //undefined<br><br>var isntHoisted = 'nope';</pre><p>Essentially, all variable and functions are hoisted to the top of their perspective scopes, but only function declarations get hoisted with their values (the functions themselves). The let and const keywords allow their variable keys to be hoisted, but the values they hold won’t be. Those variables also won’t be assigned a value at all in the hoisting process. As we’ve seen, var keys will also be hoisted but they’ll be set to undefined until the file is run and a value is assigned to them in the same way as let and const . The span of time between when a variable is hoisted and when it is initialized (given a value) is called the temporal dead zone.</p><p>Another thing to know about hoisting is that it can slow down your program as extra work needs to be accomplished before your file will be executed in the form of pulling all of those variables and function declarations to the top of the page. To limit this slowdown, it is advised to use let, const, and anonymous functions so that less information needs to be stored in memory before a file runs. The slowdown here is generally pretty minimal but it’s still something to keep in mind. It’s also best practice to limit the scope of variables as much as possible so they can get removed from memory (<a href=\"https://medium.com/@spencer.attick/memory-automatic-memory-management-garbage-collection-in-javascript-a8add44f764d\">garbage collected</a>) when they aren’t needed anymore rather than having them hang around in the memory heap indefintiely. This can take the form of scoping variables to modules or functions rather than creating variables in the global scope.</p><h3>Closure</h3><p>The last Javascript concept we’ll look at is closure. Closure refers to a function that has access to variables in an outer function, even after the outer function has returned. The values associated with the outer function are held in memory even after the out function is called. That was a lot, so let’s look at an example.</p><p>Here we have a function which returns another function:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jVtP0g6GSTrreAzmhAN_yA.png\" /></figure><p>Note that the inner function, secondFunction, returns a console.log of the arguments of both secondFunction and firstFunction.</p><p>On line 10, a call to firstFunction is made with 1 passed in as an argument. We might expect that value of 1 to be available only on line 10 as that is where the function call is made with 1 as an argument. Notice that the call to secondFunction isn’t made (where the arguments for both functions are meant to be printed out) until line 14.</p><p>This is where closure comes in!</p><p>In this example, secondFunction has closure over over firstFunction meaning that secondFunction not only has access to its own scope, but also the scope of the outer function (firstFunction). This includes any context firstFunction has <em>even after </em>it’s executed - which is pretty magical.</p><p>Keep in mind that closure only works if you’re calling the inner function directly. If you attempt to log out a variable in the outer function without calling the inner function, that won’t work:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*urh7VM9HFN9S0qEE-CBXng.png\" /></figure><p>Notice on line 14, instead of calling a function, I’m just trying to log out first which is only scoped to firstFunction and (because of closure) secondFunction. The first variable cannot be referenced alone in the global space as first isn’t a globally scoped variable. It’s function (or block) scoped.</p><p>Scope, hoisting, and closure are more advanced Javascript topics so I’d encourage you to continue to seek out examples and practice with them to really internalize what’s happening with your code in terms of each concept. I’ve shared some resources below that are a good next step for anything you’d like more information on.</p><h3>References</h3><p><strong>Hoisting</strong></p><p><a href=\"https://www.youtube.com/watch?v=EvfRXyKa_GI\">https://www.youtube.com/watch?v=EvfRXyKa_GI</a></p><p><a href=\"https://www.youtube.com/watch?v=_uTDzYyYz-U\">https://www.youtube.com/watch?v=_uTDzYyYz-U</a></p><p><a href=\"https://www.youtube.com/watch?v=j-9_15QBW2s\">https://www.youtube.com/watch?v=j-9_15QBW2s</a></p><p><a href=\"https://www.youtube.com/watch?v=ppMlvGMT2qE\">https://www.youtube.com/watch?v=ppMlvGMT2qE</a></p><p><strong>Scope</strong></p><p><a href=\"https://www.youtube.com/watch?v=TkFN6e9ZDMw\">https://www.youtube.com/watch?v=TkFN6e9ZDMw</a></p><p><a href=\"https://www.youtube.com/watch?v=bD-62OMzni0\">https://www.youtube.com/watch?v=bD-62OMzni0</a></p><p><a href=\"https://www.youtube.com/watch?v=ppMlvGMT2qE\">https://www.youtube.com/watch?v=ppMlvGMT2qE</a></p><p><strong>Closure</strong></p><p><a href=\"https://www.youtube.com/watch?v=3a0I8ICR1Vg&t=27s\">https://www.youtube.com/watch?v=3a0I8ICR1Vg&t=27s</a></p><p><a href=\"https://www.youtube.com/watch?v=vKJpN5FAeF4\">https://www.youtube.com/watch?v=vKJpN5FAeF4</a></p><p><a href=\"https://www.youtube.com/watch?v=1S8SBDhA7HA\">https://www.youtube.com/watch?v=1S8SBDhA7HA</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7f03b1b9e1b9\" width=\"1\" height=\"1\" alt=\"\">","enclosures":[],"content_encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*qJ8E0-P3Y7pMgstD\" /><figcaption><a href=\"https://unsplash.com/@michael_surazhsky\">Michael Surazhsky</a> for <a href=\"https://unsplash.com/photos/RjgruH2TSA4\">Unsplash</a></figcaption></figure><p>So you’ve learned how to execute functions and have maybe even written a few simple programs. Nice! Now it’s time to level up with some more advanced Javascript concepts. Understanding scope, hoisting, and closure are essential to internalizing how your programs will run and what behavior you can expect for certain situations that can really trip you up if you’re unclear on these concepts.</p><p>Let’s get into it!</p><h3>Scope</h3><p>The first of these concepts to understand is scope. When we’re talking about scope we’re referring to where in the program variables are accessible. There are four types of scope:</p><p><strong>Global Scope</strong></p><p>With global scope, variables are declared in such a way that makes them accessible to an entire file. To scope variables globally you just declare them outside of any functions or modules. This isn’t recommended as you might declare a global variable, forget about it, and then attempt to use the same variable in a different way elsewhere in you code which can create unexpected behavior and cause confusion, especially if you’re working with a team.</p><p>Here is an example of a variable defined with global scope:</p><pre>// Define a global variable<br>let globalVariable = 'I am a global variable';<br><br>// Define a global function<br>function globalFunction() {<br>  console.log(globalVariable);<br>}<br><br>// Call the global function from anywhere in the program<br>globalFunction(); // outputs: 'I am a global variable'</pre><p>The globalVariable and globalFunction values can be referenced anywhere in the file in which they are instantiated (though there are some limitations around hoisting which we’ll discuss later).</p><p>In Javascript, each file you create has its own global scope. You can’t share information between files without modular scope.</p><p><strong>Modular Scope</strong></p><p>Modular scope refers to a process by which variables are encapsulated in a module (ES6 offers this functionality). That module can then be shared with other parts of your program. With modular scope, variables and functions can be accessed in their own module and any other places where that module is imported.</p><p>Here is an example:</p><pre>// Define a module<br>module.exports = {<br>  moduleVariable: 'I am a module variable',<br>  moduleFunction: function() {<br>    console.log(this.moduleVariable);<br>  }<br>};</pre><pre>// Import the module into another file<br>const myModule = require('./myModule');<br><br>// Call the module function<br>myModule.moduleFunction(); // outputs: 'I am a module variable'</pre><p><strong>Block Scope</strong></p><p>Block scope refers to anything contained between two curly braces {} . This includes things like variables created within a function or variables between curly braces inif statements.</p><p>Here in an example of block scoping:</p><pre>if (true) {<br>  let x = 10;<br>}<br>console.log(x); // ReferenceError: x is not defined</pre><p>The x variable is blocked scoped (due to the use of let) and cannot be referenced outside of the curly braces it is contained in.</p><p>Please note here that var is function scoped (we’ll talk about this in just a second) but let and const are block scoped. I won’t go into that too much about var here, but in 2023 there are very few cases where it is needed so Javascript developers should be sticking with let and const .</p><p><strong>Function Scope</strong></p><p>Function scope and block scope are essentially the same thing unless you’re using the var keyword. It’s a best practice when using Javascript to stick to const and let so you don’t have to worry about function scope outside of the concept of block scope.</p><p>The difference when using var is that it makes variables accessible anywhere in the function outside of blocks, whereas let and const can only be accessed in the blocks in which they are defined.</p><p>We can see this illustrated in the example below:</p><pre>function functionScope() {<br>  if (true) {<br>    var x = 10;<br>    let y = 20;<br>  }<br>  console.log(x); // 10<br>  console.log(y); // ReferenceError: y is not defined<br>}<br><br>functionScope();</pre><p>In this example, both x and y are declared within the block of the if statement, but x is declared using the var keyword, while y is declared using the let keyword.</p><p>Since var has function scope, it can be accessed outside of the block, and its value is logged to the console as 10. However, let has block scope, which means it is only accessible within the block so trying to access it outside will result in a ReferenceError.</p><h3>Hoisting</h3><p>Now that we’ve talked a bit about scope, let’s work on understanding the concept of hoisting. Essentially, hoisting takes some of your code and moves it to the top of its scope before the file is executed automatically with Javascript.</p><p>What get’s hoisted?</p><p>Function declarations (functions created using the function keyword) are hoisted in their entirety. Consider this example and feel free to run it on your end:</p><pre>thisGetsHoisted(); //HOISTED!<br><br><br>function thisGetsHoisted() {<br>  console.log('HOISTED!');<br>}</pre><p>The function is called before it is declared, but it still works! The reason for this is that the Javascript engine automatically hoists function declarations to the very top of the scope that the function occupies at runtime. Because of that, it has already stored thisGetsHoisted in memory such that it can be accessed before the file actually gets run.</p><p>Be careful though because the same thing will not happen with anonymous functions instantiated with let or const.</p><pre>thisGetsHoisted(); //ReferenceError: Cannot access 'thisGetsHoisted' before initialization<br><br><br>const thisGetsHoisted = () => {<br>  console.log('HOISTED!');<br>}</pre><p>The let and const keywords are not hoisted in the same way as function declarations. Space is also made for them in memory, but no value is assigned by Javascript which means a ReferenceError is thrown. Using anonymous functions with let and const helps you avoid the tricky behavior that can come about with hoisting in that it forces you to write your code such that functions are created in space <em>before</em> they are run.</p><p>We see the same thing if we attempt to access a variable rather than a function:</p><pre>console.log(isntHoisted); //ReferenceError: Cannot access 'isntHoisted' before initialization<br><br>let isntHoisted = 'nope';</pre><p>The var keyword has different behavior here (you knew it was coming). The Javascript engine will also create space in memory for var variables before running a file but instead of not assigning a value for those variables, Javascript will set them to undefined . Behaviorally, this means you still can’t use them before you initialize them (set a variable for them) in space, but you won’t get a ReferenceError if you try. Instead, the variable will just be treated as what it is, undefined:</p><pre>console.log(isntHoisted); //undefined<br><br>var isntHoisted = 'nope';</pre><p>Essentially, all variable and functions are hoisted to the top of their perspective scopes, but only function declarations get hoisted with their values (the functions themselves). The let and const keywords allow their variable keys to be hoisted, but the values they hold won’t be. Those variables also won’t be assigned a value at all in the hoisting process. As we’ve seen, var keys will also be hoisted but they’ll be set to undefined until the file is run and a value is assigned to them in the same way as let and const . The span of time between when a variable is hoisted and when it is initialized (given a value) is called the temporal dead zone.</p><p>Another thing to know about hoisting is that it can slow down your program as extra work needs to be accomplished before your file will be executed in the form of pulling all of those variables and function declarations to the top of the page. To limit this slowdown, it is advised to use let, const, and anonymous functions so that less information needs to be stored in memory before a file runs. The slowdown here is generally pretty minimal but it’s still something to keep in mind. It’s also best practice to limit the scope of variables as much as possible so they can get removed from memory (<a href=\"https://medium.com/@spencer.attick/memory-automatic-memory-management-garbage-collection-in-javascript-a8add44f764d\">garbage collected</a>) when they aren’t needed anymore rather than having them hang around in the memory heap indefintiely. This can take the form of scoping variables to modules or functions rather than creating variables in the global scope.</p><h3>Closure</h3><p>The last Javascript concept we’ll look at is closure. Closure refers to a function that has access to variables in an outer function, even after the outer function has returned. The values associated with the outer function are held in memory even after the out function is called. That was a lot, so let’s look at an example.</p><p>Here we have a function which returns another function:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jVtP0g6GSTrreAzmhAN_yA.png\" /></figure><p>Note that the inner function, secondFunction, returns a console.log of the arguments of both secondFunction and firstFunction.</p><p>On line 10, a call to firstFunction is made with 1 passed in as an argument. We might expect that value of 1 to be available only on line 10 as that is where the function call is made with 1 as an argument. Notice that the call to secondFunction isn’t made (where the arguments for both functions are meant to be printed out) until line 14.</p><p>This is where closure comes in!</p><p>In this example, secondFunction has closure over over firstFunction meaning that secondFunction not only has access to its own scope, but also the scope of the outer function (firstFunction). This includes any context firstFunction has <em>even after </em>it’s executed - which is pretty magical.</p><p>Keep in mind that closure only works if you’re calling the inner function directly. If you attempt to log out a variable in the outer function without calling the inner function, that won’t work:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*urh7VM9HFN9S0qEE-CBXng.png\" /></figure><p>Notice on line 14, instead of calling a function, I’m just trying to log out first which is only scoped to firstFunction and (because of closure) secondFunction. The first variable cannot be referenced alone in the global space as first isn’t a globally scoped variable. It’s function (or block) scoped.</p><p>Scope, hoisting, and closure are more advanced Javascript topics so I’d encourage you to continue to seek out examples and practice with them to really internalize what’s happening with your code in terms of each concept. I’ve shared some resources below that are a good next step for anything you’d like more information on.</p><h3>References</h3><p><strong>Hoisting</strong></p><p><a href=\"https://www.youtube.com/watch?v=EvfRXyKa_GI\">https://www.youtube.com/watch?v=EvfRXyKa_GI</a></p><p><a href=\"https://www.youtube.com/watch?v=_uTDzYyYz-U\">https://www.youtube.com/watch?v=_uTDzYyYz-U</a></p><p><a href=\"https://www.youtube.com/watch?v=j-9_15QBW2s\">https://www.youtube.com/watch?v=j-9_15QBW2s</a></p><p><a href=\"https://www.youtube.com/watch?v=ppMlvGMT2qE\">https://www.youtube.com/watch?v=ppMlvGMT2qE</a></p><p><strong>Scope</strong></p><p><a href=\"https://www.youtube.com/watch?v=TkFN6e9ZDMw\">https://www.youtube.com/watch?v=TkFN6e9ZDMw</a></p><p><a href=\"https://www.youtube.com/watch?v=bD-62OMzni0\">https://www.youtube.com/watch?v=bD-62OMzni0</a></p><p><a href=\"https://www.youtube.com/watch?v=ppMlvGMT2qE\">https://www.youtube.com/watch?v=ppMlvGMT2qE</a></p><p><strong>Closure</strong></p><p><a href=\"https://www.youtube.com/watch?v=3a0I8ICR1Vg&t=27s\">https://www.youtube.com/watch?v=3a0I8ICR1Vg&t=27s</a></p><p><a href=\"https://www.youtube.com/watch?v=vKJpN5FAeF4\">https://www.youtube.com/watch?v=vKJpN5FAeF4</a></p><p><a href=\"https://www.youtube.com/watch?v=1S8SBDhA7HA\">https://www.youtube.com/watch?v=1S8SBDhA7HA</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7f03b1b9e1b9\" width=\"1\" height=\"1\" alt=\"\">","media":{}}]}